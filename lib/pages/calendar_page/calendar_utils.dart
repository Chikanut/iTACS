import 'package:flutter/material.dart';
import 'models/lesson_model.dart';
import 'package:intl/intl.dart';


enum InstructorLessonStatus {
    needsInstructor,
    assigned,
    teaching,
  }

enum LessonProgressStatus {
  scheduled,   // –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ
  inProgress,  // –í –ø—Ä–æ—Ü–µ—Å—ñ
  completed,   // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
}

enum LessonReadinessStatus {
  notReady,           // –ù–µ –≥–æ—Ç–æ–≤–µ (–∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ)
  needsInstructor,    // –ü–æ—Ç—Ä—ñ–±–µ–Ω —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
  ready,              // –ì–æ—Ç–æ–≤–µ –¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è
  inProgressReady,    // –í –ø—Ä–æ—Ü–µ—Å—ñ (–≤—Å–µ –û–ö)
  inProgressNotReady, // –í –ø—Ä–æ—Ü–µ—Å—ñ (–∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏)
  completedReady,     // –ó–∞–≤–µ—Ä—à–µ–Ω–æ (–≤—Å–µ –û–ö)
  completedNotReady,  // –ó–∞–≤–µ—Ä—à–µ–Ω–æ (–∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–∞–Ω–∏–º–∏)
}

extension LessonProgressStatusExtension on LessonProgressStatus {
  String get label {
    switch (this) {
      case LessonProgressStatus.scheduled:
        return '–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ';
      case LessonProgressStatus.inProgress:
        return '–ü—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è';
      case LessonProgressStatus.completed:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
    }
  }

  IconData get icon {
    switch (this) {
      case LessonProgressStatus.scheduled:
        return Icons.schedule;
      case LessonProgressStatus.inProgress:
        return Icons.play_circle;
      case LessonProgressStatus.completed:
        return Icons.check_circle;
    }
  }
}

extension LessonReadinessStatusExtension on LessonReadinessStatus {
  Color get color {
    switch (this) {
      case LessonReadinessStatus.notReady:
        return Colors.red;              // üî¥ –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
      case LessonReadinessStatus.needsInstructor:
        return Colors.orange;           // üü† –ü–æ—Ç—Ä—ñ–±–µ–Ω —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
      case LessonReadinessStatus.ready:
        return Colors.green;            // üü¢ –ì–æ—Ç–æ–≤–µ –¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è
      case LessonReadinessStatus.inProgressReady:
        return Colors.blue;             // üîµ –í –ø—Ä–æ—Ü–µ—Å—ñ (–≤—Å–µ –û–ö)
      case LessonReadinessStatus.inProgressNotReady:
        return Colors.red;              // üî¥ –í –ø—Ä–æ—Ü–µ—Å—ñ –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏
      case LessonReadinessStatus.completedReady:
        return Colors.grey;             // ‚ö´ –ó–∞–≤–µ—Ä—à–µ–Ω–æ (–≤—Å–µ –û–ö)
      case LessonReadinessStatus.completedNotReady:
        return Colors.red;              // üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏
    }
  }

  String get label {
    switch (this) {
      case LessonReadinessStatus.notReady:
        return '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ';
      case LessonReadinessStatus.needsInstructor:
        return '–ü–æ—Ç—Ä—ñ–±–µ–Ω –≤–∏–∫–ª–∞–¥–∞—á';
      case LessonReadinessStatus.ready:
        return '–ì–æ—Ç–æ–≤–µ';
      case LessonReadinessStatus.inProgressReady:
        return '–ü—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è';
      case LessonReadinessStatus.inProgressNotReady:
        return '–ü—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è (—î –ø—Ä–æ–±–ª–µ–º–∏)';
      case LessonReadinessStatus.completedReady:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case LessonReadinessStatus.completedNotReady:
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ (—î –ø—Ä–æ–±–ª–µ–º–∏)';
    }
  }

  IconData get icon {
    switch (this) {
      case LessonReadinessStatus.notReady:
        return Icons.error;
      case LessonReadinessStatus.needsInstructor:
        return Icons.person_add;
      case LessonReadinessStatus.ready:
        return Icons.check_circle;
      case LessonReadinessStatus.inProgressReady:
        return Icons.play_circle;
      case LessonReadinessStatus.inProgressNotReady:
        return Icons.warning;
      case LessonReadinessStatus.completedReady:
        return Icons.done_all;
      case LessonReadinessStatus.completedNotReady:
        return Icons.error_outline;
    }
  }

  String get description {
    switch (this) {
      case LessonReadinessStatus.notReady:
        return '–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–ª—è –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ';
      case LessonReadinessStatus.needsInstructor:
        return '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä';
      case LessonReadinessStatus.ready:
        return '–í—Å—ñ –¥–∞–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ, –≥–æ—Ç–æ–≤–µ –¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è';
      case LessonReadinessStatus.inProgressReady:
        return '–ó–∞–Ω—è—Ç—Ç—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è, –≤—Å—ñ –¥–∞–Ω—ñ –≤ –ø–æ—Ä—è–¥–∫—É';
      case LessonReadinessStatus.inProgressNotReady:
        return '–ó–∞–Ω—è—Ç—Ç—è –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è, –∞–ª–µ —î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –¥–∞–Ω–∏–º–∏ –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ';
      case LessonReadinessStatus.completedReady:
        return '–ó–∞–Ω—è—Ç—Ç—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤—Å—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ';
      case LessonReadinessStatus.completedNotReady:
        return '–ó–∞–Ω—è—Ç—Ç—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ';
    }
  }
}

// –û–ù–û–í–õ–ï–ù–ò–ô LessonStatusUtils
class LessonStatusUtils {
  // –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–ª—è –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ - –î–û–î–ê–ù–û trainingPeriod
  static const List<String> criticalFields = [
    'instructor',
    'location', 
    'unit',
    'maxParticipants',
    'trainingPeriod', // üëà –î–û–î–ê–ù–û
  ];

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–ª—è
  static bool areCriticalFieldsFilled(LessonModel lesson) {
    // –Ü–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    if (lesson.instructor.isEmpty || lesson.instructor == '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ') {
      return false;
    }
    
    // –ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è
    if (lesson.location.isEmpty) {
      return false;
    }
    
    // –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª
    if (lesson.unit.isEmpty) {
      return false;
    }
    
    // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤
    if (lesson.maxParticipants <= 0) {
      return false;
    }
    
    // –ü–µ—Ä—ñ–æ–¥ –Ω–∞–≤—á–∞–Ω–Ω—è üëà –î–û–î–ê–ù–û
    if (lesson.trainingPeriod.isEmpty) {
      return false;
    }
    
    return true;
  }

   static LessonProgressStatus getProgressStatus(LessonModel lesson) {
    final now = DateTime.now();
    
    if (now.isBefore(lesson.startTime)) {
      return LessonProgressStatus.scheduled;
    } else if (now.isAfter(lesson.endTime)) {
      return LessonProgressStatus.completed;
    } else {
      return LessonProgressStatus.inProgress;
    }
  }

  /// –í–∏–∑–Ω–∞—á–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–Ω—è—Ç—Ç—è
  static LessonReadinessStatus getReadinessStatus(LessonModel lesson) {
    final progressStatus = getProgressStatus(lesson);
    final criticalFieldsFilled = areCriticalFieldsFilled(lesson);
    final hasInstructor = lesson.instructor.isNotEmpty && 
                         lesson.instructor != '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ';
    
    switch (progressStatus) {
      case LessonProgressStatus.scheduled:
        if (!criticalFieldsFilled) {
          return LessonReadinessStatus.notReady;
        } else if (!hasInstructor) {
          return LessonReadinessStatus.needsInstructor;
        } else {
          return LessonReadinessStatus.ready;
        }
        
      case LessonProgressStatus.inProgress:
        if (!criticalFieldsFilled) {
          return LessonReadinessStatus.inProgressNotReady;
        } else {
          return LessonReadinessStatus.inProgressReady;
        }
        
      case LessonProgressStatus.completed:
        if (!criticalFieldsFilled) {
          return LessonReadinessStatus.completedNotReady;
        } else {
          return LessonReadinessStatus.completedReady;
        }
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å (–¥–ª—è –ø—Ä–æ—Å—Ç—ñ—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
  static ({
    LessonProgressStatus progress,
    LessonReadinessStatus readiness,
    List<String> issues,
  }) getFullStatus(LessonModel lesson) {
    final progress = getProgressStatus(lesson);
    final readiness = getReadinessStatus(lesson);
    final issues = getMissingCriticalFields(lesson);
    
    return (
      progress: progress,
      readiness: readiness,
      issues: issues,
    );
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–ª—ñ–≤
  static List<String> getMissingCriticalFields(LessonModel lesson) {
    final List<String> missing = [];
    
    if (lesson.instructor.isEmpty || lesson.instructor == '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ') {
      missing.add('–Ü–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä');
    }
    
    if (lesson.location.isEmpty) {
      missing.add('–ú—ñ—Å—Ü–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è');
    }
    
    if (lesson.unit.isEmpty) {
      missing.add('–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª');
    }
    
    if (lesson.maxParticipants <= 0) {
      missing.add('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤');
    }
    
    if (lesson.trainingPeriod.isEmpty) {
      missing.add('–ü–µ—Ä—ñ–æ–¥ –Ω–∞–≤—á–∞–Ω–Ω—è'); // üëà –î–û–î–ê–ù–û
    }
    
    return missing;
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–ª—ñ–≤ (–¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É)
  static double getCriticalFieldsProgress(LessonModel lesson) {
    int filledCount = 0;
    const int totalCount = 5; // üëà –ó–ë–Ü–õ–¨–®–ï–ù–û –¥–æ 5 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–ª—ñ–≤
    
    if (lesson.instructor.isNotEmpty && lesson.instructor != '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ') {
      filledCount++;
    }
    
    if (lesson.location.isNotEmpty) {
      filledCount++;
    }
    
    if (lesson.unit.isNotEmpty) {
      filledCount++;
    }
    
    if (lesson.maxParticipants > 0) {
      filledCount++;
    }
    
    if (lesson.trainingPeriod.isNotEmpty) { // üëà –î–û–î–ê–ù–û
      filledCount++;
    }
    
    return filledCount / totalCount;
  }

  /// –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥ –Ω–∞–≤—á–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  static String formatTrainingPeriod(String trainingPeriod) {
    if (trainingPeriod.isEmpty) return '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
    
    // –Ø–∫—â–æ –ø–µ—Ä—ñ–æ–¥ —É —Ñ–æ—Ä–º–∞—Ç—ñ "dd.MM.yyyy - dd.MM.yyyy"
    if (trainingPeriod.contains(' - ')) {
      final parts = trainingPeriod.split(' - ');
      if (parts.length == 2) {
        return '${parts[0]} - ${parts[1]}';
      }
    }
    
    return trainingPeriod;
  }

  /// –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä—ñ–æ–¥—É –Ω–∞–≤—á–∞–Ω–Ω—è
  static bool isValidTrainingPeriod(String period) {
    if (period.isEmpty) return false;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç "dd.MM.yyyy - dd.MM.yyyy"
    final regex = RegExp(r'^\d{2}\.\d{2}\.\d{4} - \d{2}\.\d{2}\.\d{4}$');
    return regex.hasMatch(period);
  }

  /// –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—ñ–æ–¥ –Ω–∞–≤—á–∞–Ω–Ω—è –∑ –¥–∞—Ç
  static String createTrainingPeriod(DateTime startDate, DateTime endDate) {
    final formatter = DateFormat('dd.MM.yyyy');
    return '${formatter.format(startDate)} - ${formatter.format(endDate)}';
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –∑ –ø–µ—Ä—ñ–æ–¥—É
  static (DateTime?, DateTime?) parseTrainingPeriod(String period) {
    if (!isValidTrainingPeriod(period)) return (null, null);
    
    final parts = period.split(' - ');
    try {
      final formatter = DateFormat('dd.MM.yyyy');
      final startDate = formatter.parse(parts[0]);
      final endDate = formatter.parse(parts[1]);
      return (startDate, endDate);
    } catch (e) {
      return (null, null);
    }
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–µ—Ä—ñ–æ–¥ –∞–∫—Ç–∏–≤–Ω–∏–π (–ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ –≤ –º–µ–∂–∞—Ö –ø–µ—Ä—ñ–æ–¥—É)
  static bool isTrainingPeriodActive(String period) {
    final (startDate, endDate) = parseTrainingPeriod(period);
    if (startDate == null || endDate == null) return false;
    
    final now = DateTime.now();
    return now.isAfter(startDate) && now.isBefore(endDate.add(const Duration(days: 1)));
  }
}

extension InstructorLessonStatusExtension on InstructorLessonStatus {
  Color get color {
    switch (this) {
      case InstructorLessonStatus.needsInstructor:
        return Colors.orange;
      case InstructorLessonStatus.assigned:
        return Colors.blue;
      case InstructorLessonStatus.teaching:
        return Colors.green;
    }
  }

String get label {
  switch (this) {
    case InstructorLessonStatus.needsInstructor:
      return '–ü–æ—Ç—Ä—ñ–±–µ–Ω –≤–∏–∫–ª–∞–¥–∞—á';
    case InstructorLessonStatus.assigned:
      return '–í–∏–∫–ª–∞–¥–∞—á –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π';
    case InstructorLessonStatus.teaching:
      return '–í–∏ –≤–∏–∫–ª–∞–¥–∞—î—Ç–µ';
  }
}

IconData get icon {
  switch (this) {
    case InstructorLessonStatus.needsInstructor:
      return Icons.person_add;
    case InstructorLessonStatus.assigned:
      return Icons.person;
    case InstructorLessonStatus.teaching:
      return Icons.school;
  }
}
}

class CalendarUtils {
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  static const double timeColumnWidth = 60.0;
  static const double hourHeight = 80.0;
  static const double minuteHeight = hourHeight / 60.0;

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å –∑ —Å–ø–∏—Å–∫—É –∑–∞–Ω—è—Ç—å
  static double getMinHourFromLessons(List<LessonModel> lessons) {
    if (lessons.isEmpty) return 8.0; // fallback —è–∫—â–æ –Ω–µ–º–∞—î –∑–∞–Ω—è—Ç—å
    
    final minTime = lessons
        .map((lesson) => lesson.startTime.hour + (lesson.startTime.minute / 60.0))
        .reduce((a, b) => a < b ? a : b);
    
    // –û–∫—Ä—É–≥–ª—é—î–º–æ –≤–Ω–∏–∑ –¥–æ —Ü—ñ–ª–æ—ó –≥–æ–¥–∏–Ω–∏ –∑ –±—É—Ñ–µ—Ä–æ–º 30 —Ö–≤
    return (minTime - 0.5).floorToDouble().clamp(0.0, 23.0);
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –∑ —Å–ø–∏—Å–∫—É –∑–∞–Ω—è—Ç—å
  static double getMaxHourFromLessons(List<LessonModel> lessons) {
    if (lessons.isEmpty) return 20.0; // fallback —è–∫—â–æ –Ω–µ–º–∞—î –∑–∞–Ω—è—Ç—å
    
    final maxTime = lessons
        .map((lesson) => lesson.endTime.hour + (lesson.endTime.minute / 60.0))
        .reduce((a, b) => a > b ? a : b);
    
    // –û–∫—Ä—É–≥–ª—é—î–º–æ –≤–≥–æ—Ä—É –¥–æ —Ü—ñ–ª–æ—ó –≥–æ–¥–∏–Ω–∏ –∑ –±—É—Ñ–µ—Ä–æ–º 30 —Ö–≤
    return (maxTime + 0.5).ceilToDouble().clamp(1.0, 24.0);
  }
  
  // –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ—Ç
  static const Map<String, Color> groupColors = {
    '1-–∞ —Ä–æ—Ç–∞': Color(0xFFE3F2FD),
    '2-–∞ —Ä–æ—Ç–∞': Color(0xFFF3E5F5),
    '3-—è —Ä–æ—Ç–∞': Color(0xFFE8F5E8),
    '4-–∞ —Ä–æ—Ç–∞': Color(0xFFFFF3E0),
    '5-–∞ —Ä–æ—Ç–∞': Color(0xFFFCE4EC),
    '6-–∞ —Ä–æ—Ç–∞': Color(0xFFF1F8E9),
  };
  
  // –Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ –∑–∞–Ω—è—Ç—å
  static const Map<String, IconData> lessonTypeIcons = {
    '—Ç–∞–∫—Ç–∏–∫–∞': Icons.military_tech,
    '—Ñ—ñ–∑–∏—á–Ω–∞': Icons.fitness_center,
    '—Å—Ç—Ä–æ–π–æ–≤–∞': Icons.format_align_center,
    '—Ç–µ–æ—Ä—ñ—è': Icons.school,
    '—Ç–µ—Ö–Ω—ñ—á–Ω–∞': Icons.build,
    '–≤–æ–¥—ñ–Ω–Ω—è': Icons.directions_car,
    '—Å—Ç—Ä—ñ–ª—å–±–∏': Icons.gps_fixed,
  };

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–ª—å–æ—Ä –¥–ª—è –≥—Ä—É–ø–∏
  static Color getGroupColor(String groupName) {
    return groupColors[groupName] ?? Colors.grey.shade200;
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø—É –∑–∞–Ω—è—Ç—Ç—è
  static IconData getLessonTypeIcon(String lessonType) {
    final type = lessonType.toLowerCase();
    return lessonTypeIcons[type] ?? Icons.event;
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—é—Ç—å—Å—è —á–∞—Å–∏
  static bool timesOverlap(TimeOfDay start1, TimeOfDay end1, TimeOfDay start2, TimeOfDay end2) {
    final start1Minutes = start1.hour * 60 + start1.minute;
    final end1Minutes = end1.hour * 60 + end1.minute;
    final start2Minutes = start2.hour * 60 + start2.minute;
    final end2Minutes = end2.hour * 60 + end2.minute;
    
    // –ó–∞–Ω—è—Ç—Ç—è –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—é—Ç—å—Å—è —è–∫—â–æ:
    // (start1 < end2) AND (start2 < end1)
    return start1Minutes < end2Minutes && start2Minutes < end1Minutes;
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ —á–∞—Å–æ–≤—ñ–π —Å—ñ—Ç—Ü—ñ
  static double getTimePosition(TimeOfDay time, double minHour) {
    return (time.hour - minHour) * hourHeight + (time.minute * minuteHeight);
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏—Å–æ—Ç—É –µ–ª–µ–º–µ–Ω—Ç–∞ –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
  static double getDurationHeight(TimeOfDay start, TimeOfDay end) {
    final startMinutes = start.hour * 60 + start.minute;
    final endMinutes = end.hour * 60 + end.minute;
    final durationMinutes = endMinutes - startMinutes;
    return durationMinutes * minuteHeight;
  }

  /// –§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —á–∞—Å
  static String formatTime(TimeOfDay time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –¥–Ω—è —Ç–∏–∂–Ω—è
  static String getDayName(int weekday, {bool short = true}) {
    if (short) {
      const days = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–ù–î'];
      return days[weekday - 1];
    } else {
      const days = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü\'—è—Ç–Ω–∏—Ü—è', '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è'];
      return days[weekday - 1];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—è—Ü—è
  static String getMonthName(int month, {bool short = false}) {
    if (short) {
      const months = ['–°—ñ—á', '–õ—é—Ç', '–ë–µ—Ä', '–ö–≤—ñ', '–¢—Ä–∞', '–ß–µ—Ä', 
                     '–õ–∏–ø', '–°–µ—Ä', '–í–µ—Ä', '–ñ–æ–≤', '–õ–∏—Å', '–ì—Ä—É'];
      return months[month - 1];
    } else {
      const months = ['–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
                     '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'];
      return months[month - 1];
    }
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –¥–∞—Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è
  static bool isToday(DateTime date) {
    final now = DateTime.now();
    return date.year == now.year && date.month == now.month && date.day == now.day;
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–Ω—ñ —Ç–∏–∂–Ω—è –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó –¥–∞—Ç–∏
  static List<DateTime> getWeekDays(DateTime selectedDate) {
    final startOfWeek = getStartOfWeek(selectedDate);
    final weekDays = List.generate(7, (index) => startOfWeek.add(Duration(days: index)));
    
    // üëà –î–û–î–ê–¢–ò DEBUG
    debugPrint('üìÖ getWeekDays:');
    debugPrint('  Selected date: ${selectedDate.day}.${selectedDate.month}.${selectedDate.year}');
    debugPrint('  Week days:');
    for (int i = 0; i < weekDays.length; i++) {
      final day = weekDays[i];
      final dayName = getDayName(day.weekday);
      debugPrint('    $i ($dayName): ${day.day}.${day.month}.${day.year}');
    }
    
    return weekDays;
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è
  static DateTime getStartOfWeek(DateTime date) {
    final daysFromMonday = date.weekday - 1;
    final startOfWeek = date.subtract(Duration(days: daysFromMonday));
    
    // üëà –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–æ–∫ –¥–Ω—è
    return DateTime(startOfWeek.year, startOfWeek.month, startOfWeek.day, 0, 0, 0);
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å —Ç–∏–∂–Ω—è (–Ω–µ–¥—ñ–ª—è –æ 23:59:59)
  static DateTime getEndOfWeek(DateTime date) {
    final startOfWeek = getStartOfWeek(date);
    final endOfWeek = startOfWeek.add(const Duration(days: 6));
    return DateTime(endOfWeek.year, endOfWeek.month, endOfWeek.day, 23, 59, 59);
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—á–∞—Ç–æ–∫ –º—ñ—Å—è—Ü—è
  static DateTime getStartOfMonth(DateTime date) {
    return DateTime(date.year, date.month, 1);
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–Ω–µ—Ü—å –º—ñ—Å—è—Ü—è
  static DateTime getEndOfMonth(DateTime date) {
    return DateTime(date.year, date.month + 1, 0);
  }

  /// –û–±—á–∏—Å–ª–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –∑–∞–ø–æ–≤–Ω–µ–Ω–æ—Å—Ç—ñ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
  static double getOccupancyRate(int filled, int total) {
    return total > 0 ? filled / total : 0.0;
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞–Ω—è—Ç—Ç—è –º–∞–π–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ (80%+)
  static bool isAlmostFull(int filled, int total) {
    return getOccupancyRate(filled, total) >= 0.8;
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞–Ω—è—Ç—Ç—è –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–ø–æ–≤–Ω–µ–Ω–µ
  static bool isFull(int filled, int total) {
    return filled >= total;
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç—Ç—è
  static LessonStatus getLessonStatus(int filled, int total, bool isRegistered) {
    if (isRegistered) return LessonStatus.registered;
    if (isFull(filled, total)) return LessonStatus.full;
    if (isAlmostFull(filled, total)) return LessonStatus.almostFull;
    return LessonStatus.available;
  }

  /// –í—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –∑–∞ —á–∞—Å–æ–º
  static List<Map<String, dynamic>> sortLessonsByTime(List<Map<String, dynamic>> lessons) {
    return lessons..sort((a, b) {
      final timeA = a['start'] as TimeOfDay;
      final timeB = b['start'] as TimeOfDay;
      final minutesA = timeA.hour * 60 + timeA.minute;
      final minutesB = timeB.hour * 60 + timeB.minute;
      return minutesA.compareTo(minutesB);
    });
  }

  /// –ì—Ä—É–ø—É–≤–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –∑–∞ –¥–Ω—è–º–∏
  static Map<int, List<Map<String, dynamic>>> groupLessonsByDay(List<Map<String, dynamic>> lessons) {
    final Map<int, List<Map<String, dynamic>>> grouped = {};
    
    for (final lesson in lessons) {
      final dayOffset = lesson['dayOffset'] as int;
      if (!grouped.containsKey(dayOffset)) {
        grouped[dayOffset] = [];
      }
      grouped[dayOffset]!.add(lesson);
    }
    
    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞–Ω—è—Ç—Ç—è –≤ –∫–æ–∂–Ω–æ–º—É –¥–Ω—ñ –∑–∞ —á–∞—Å–æ–º
    for (final day in grouped.keys) {
      grouped[day] = sortLessonsByTime(grouped[day]!);
    }
    
    return grouped;
  }

  /// –ó–Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—é—á—ñ –∑–∞–Ω—è—Ç—Ç—è
  static List<Map<String, dynamic>> findOverlappingLessons(
    List<Map<String, dynamic>> lessons,
    Map<String, dynamic> targetLesson,
    int dayIndex,
  ) {
    final targetStart = targetLesson['start'] as TimeOfDay;
    final targetEnd = targetLesson['end'] as TimeOfDay;
    
    return lessons.where((lesson) => 
      lesson['dayOffset'] == dayIndex && 
      lesson['id'] != targetLesson['id'] &&
      timesOverlap(lesson['start'], lesson['end'], targetStart, targetEnd)
    ).toList();
  }

  /// –û–±—á–∏—Å–ª–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—é—á–∏—Ö –∑–∞–Ω—è—Ç—å
  static ({double left, double right}) calculateOverlapPosition(
    List<Map<String, dynamic>> overlappingLessons,
    Map<String, dynamic> currentLesson,
    double totalWidth,
    double margin,
  ) {
    final overlapCount = overlappingLessons.length + 1;
    final lessonIndex = overlappingLessons.indexOf(currentLesson);
    final actualIndex = lessonIndex >= 0 ? lessonIndex + 1 : 0;
    
    final availableWidth = totalWidth - (margin * 2);
    final lessonWidth = availableWidth / overlapCount;
    
    final left = margin + (actualIndex * lessonWidth);
    final right = margin + ((overlapCount - actualIndex - 1) * lessonWidth);
    
    return (left: left, right: right);
  }

  /// –í–∞–ª—ñ–¥–∞—Ü—ñ—è —á–∞—Å—É –∑–∞–Ω—è—Ç—Ç—è
  static String? validateLessonTime(TimeOfDay start, TimeOfDay end, {double? minHour, double? maxHour}) {
    final startMinutes = start.hour * 60 + start.minute;
    final endMinutes = end.hour * 60 + end.minute;
    
    if (startMinutes >= endMinutes) {
      return '–ß–∞—Å –ø–æ—á–∞—Ç–∫—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä–∞–Ω—ñ—à–µ —á–∞—Å—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è';
    }
    
    if (endMinutes - startMinutes < 30) {
      return '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞–Ω—è—Ç—Ç—è - 30 —Ö–≤–∏–ª–∏–Ω';
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –º–µ–∂—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ
    if (minHour != null && maxHour != null) {
      if (start.hour < minHour || end.hour > maxHour) {
        return '–ó–∞–Ω—è—Ç—Ç—è –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è –∑ ${minHour.toInt()}:00 –¥–æ ${maxHour.toInt()}:00';
      }
    }
    
    return null;
  }

  /// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–ª—å–æ—Ä—É –¥–ª—è –≥—Ä—É–ø–∏ (—è–∫—â–æ –Ω–µ–º–∞—î –≤ preset)
  static Color generateGroupColor(String groupName) {
    final hash = groupName.hashCode;
    final hue = (hash % 360).toDouble();
    return HSVColor.fromAHSV(1.0, hue, 0.3, 0.95).toColor();
  }

    /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞
  static InstructorLessonStatus getInstructorLessonStatus(LessonModel lesson, bool isUserInstructor) {
    if (isUserInstructor) return InstructorLessonStatus.teaching;
    if (lesson.instructor.isEmpty || lesson.instructor == '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ') {
      return InstructorLessonStatus.needsInstructor;
    }
    return InstructorLessonStatus.assigned;
  }
}

enum LessonStatus {
  available,
  almostFull,
  full,
  registered,
}

/// –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è –¥–ª—è LessonStatus
extension LessonStatusExtension on LessonStatus {
  Color get color {
    switch (this) {
      case LessonStatus.available:
        return Colors.green;
      case LessonStatus.almostFull:
        return Colors.orange;
      case LessonStatus.full:
        return Colors.red;
      case LessonStatus.registered:
        return Colors.blue;
    }
  }

  String get label {
    switch (this) {
      case LessonStatus.available:
        return '–î–æ—Å—Ç—É–ø–Ω–æ';
      case LessonStatus.almostFull:
        return '–ú–∞–π–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ';
      case LessonStatus.full:
        return '–ó–∞–ø–æ–≤–Ω–µ–Ω–æ';
      case LessonStatus.registered:
        return '–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ';
    }
  }

  IconData get icon {
    switch (this) {
      case LessonStatus.available:
        return Icons.event_available;
      case LessonStatus.almostFull:
        return Icons.warning;
      case LessonStatus.full:
        return Icons.block;
      case LessonStatus.registered:
        return Icons.check_circle;
    }
  }

  
}