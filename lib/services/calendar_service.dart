// lib/pages/calendar_page/services/calendar_service.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import '../pages/calendar_page/models/lesson_model.dart';
import '../../../globals.dart';
import '../pages/calendar_page/calendar_utils.dart';

class CalendarService {
  static final CalendarService _instance = CalendarService._internal();
  factory CalendarService() => _instance;
  CalendarService._internal();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä—É–ø–∏ –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
  Future<List<LessonModel>> getLessonsForPeriod({
    required DateTime startDate,
    required DateTime endDate,
    String? groupId,
  }) async {
    try {
      final currentGroupId = groupId ?? Globals.profileManager.currentGroupId;
      if (currentGroupId == null) {
        debugPrint('CalendarService: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä—É–ø–∏');
        return [];
      }

      debugPrint('CalendarService: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—å –¥–ª—è –≥—Ä—É–ø–∏ $currentGroupId –≤—ñ–¥ $startDate –¥–æ $endDate');

      // –ó–∞–ø–∏—Ç –¥–æ Firestore
      final querySnapshot = await _firestore
          .collection('lessons')
          .doc(currentGroupId)
          .collection('items')
          .where('startTime', isGreaterThanOrEqualTo: Timestamp.fromDate(startDate))
          .where('startTime', isLessThanOrEqualTo: Timestamp.fromDate(endDate))
          .orderBy('startTime')
          .get();

      final lessons = querySnapshot.docs
          .map((doc) => LessonModel.fromFirestore(doc.data(), doc.id))
          .toList();

      debugPrint('CalendarService: –ó–Ω–∞–π–¥–µ–Ω–æ ${lessons.length} –∑–∞–Ω—è—Ç—å');
      return lessons;
    } catch (e) {
      debugPrint('CalendarService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—å: $e');
      return [];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è —Ç–∏–∂–Ω—è
  Future<List<LessonModel>> getLessonsForWeek(DateTime selectedDate) async {
    final startOfWeek = CalendarUtils.getStartOfWeek(selectedDate);
    final endOfWeek = CalendarUtils.getEndOfWeek(selectedDate);
    
    debugPrint('üìÖ getLessonsForWeek:');
    debugPrint('  Selected: ${selectedDate.day}.${selectedDate.month}.${selectedDate.year}');
    debugPrint('  Week: ${startOfWeek.day}.${startOfWeek.month} - ${endOfWeek.day}.${endOfWeek.month}');
    
    return await getLessonsForPeriod(
      startDate: startOfWeek,
      endDate: endOfWeek,
    );
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è –¥–Ω—è
  Future<List<LessonModel>> getLessonsForDay(DateTime selectedDate) async {
    final startOfDay = DateTime(selectedDate.year, selectedDate.month, selectedDate.day);
    final endOfDay = startOfDay.add(const Duration(hours: 23, minutes: 59));
    
    return await getLessonsForPeriod(
      startDate: startOfDay,
      endDate: endOfDay,
    );
  }

  /// –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–Ω—è—Ç—Ç—è
  Future<String?> createLesson(LessonModel lesson) async {
    try {
      final currentGroupId = Globals.profileManager.currentGroupId;
      if (currentGroupId == null) {
        throw Exception('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—Ç—è');
      }

      final currentUser = Globals.firebaseAuth.currentUser;
      if (currentUser == null) {
        throw Exception('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
      }

      final lessonData = {
        'title': lesson.title,
        'description': lesson.description,
        'startTime': Timestamp.fromDate(lesson.startTime),
        'endTime': Timestamp.fromDate(lesson.endTime),
        'groupId': currentGroupId,
        'groupName': lesson.groupName,
        'unit': lesson.unit,
        'instructorName': lesson.instructorId.isEmpty ? '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ' : lesson.instructorName,
        'instructorId': lesson.instructorId,
        'location': lesson.location,
        'maxParticipants': lesson.maxParticipants,
        'currentParticipants': 0,
        'participants': <String>[],
        'status': 'scheduled',
        'tags': lesson.tags,
        'createdBy': currentUser.uid,
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
        'recurrence': lesson.recurrence != null ? {
        'type': lesson.recurrence!.type,
        'interval': lesson.recurrence!.interval,
        'endDate': Timestamp.fromDate(lesson.recurrence!.endDate),
        'trainingPeriod': lesson.trainingPeriod, 
        } : null,
      };

      final docRef = await _firestore
          .collection('lessons')
          .doc(currentGroupId)
          .collection('items')
          .add(lessonData);

      debugPrint('CalendarService: –ó–∞–Ω—è—Ç—Ç—è —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: ${docRef.id}');
      return docRef.id;
    } catch (e) {
      debugPrint('CalendarService: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—Ç—è: $e');
      return null;
    }
  }

  /// –û–Ω–æ–≤–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è
  Future<bool> updateLesson(String lessonId, Map<String, dynamic> updates) async {
    try {
      final currentGroupId = Globals.profileManager.currentGroupId;
      if (currentGroupId == null) return false;

      updates['updatedAt'] = FieldValue.serverTimestamp();

      await _firestore
          .collection('lessons')
          .doc(currentGroupId)
          .collection('items')
          .doc(lessonId)
          .update(updates);

      debugPrint('CalendarService: –ó–∞–Ω—è—Ç—Ç—è $lessonId –æ–Ω–æ–≤–ª–µ–Ω–æ');
      return true;
    } catch (e) {
      debugPrint('CalendarService: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—Ç—è: $e');
      return false;
    }
  }

  /// –í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è
  Future<bool> deleteLesson(String lessonId) async {
    try {
      final currentGroupId = Globals.profileManager.currentGroupId;
      if (currentGroupId == null) return false;

      await _firestore
          .collection('lessons')
          .doc(currentGroupId)
          .collection('items')
          .doc(lessonId)
          .delete();

      debugPrint('CalendarService: –ó–∞–Ω—è—Ç—Ç—è $lessonId –≤–∏–¥–∞–ª–µ–Ω–æ');
      return true;
    } catch (e) {
      debugPrint('CalendarService: –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–Ω—è—Ç—Ç—è: $e');
      return false;
    }
  }

  /// –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è
  Future<bool> registerForLesson(String lessonId) async {
    try {
      final currentGroupId = Globals.profileManager.currentGroupId;
      final currentUser = Globals.firebaseAuth.currentUser;
      
      if (currentGroupId == null || currentUser == null) return false;

      final lessonRef = _firestore
          .collection('lessons')
          .doc(currentGroupId)
          .collection('items')
          .doc(lessonId);

      await _firestore.runTransaction((transaction) async {
        final lessonDoc = await transaction.get(lessonRef);
        
        if (!lessonDoc.exists) {
          throw Exception('–ó–∞–Ω—è—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        final data = lessonDoc.data()!;
        final participants = List<String>.from(data['participants'] ?? []);
        final maxParticipants = data['maxParticipants'] ?? 0;

        if (participants.contains(currentUser.uid)) {
          throw Exception('–í–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Ü–µ –∑–∞–Ω—è—Ç—Ç—è');
        }

        if (participants.length >= maxParticipants) {
          throw Exception('–ó–∞–Ω—è—Ç—Ç—è –∑–∞–ø–æ–≤–Ω–µ–Ω–µ');
        }

        participants.add(currentUser.uid);

        transaction.update(lessonRef, {
          'participants': participants,
          'currentParticipants': participants.length,
          'updatedAt': FieldValue.serverTimestamp(),
        });
      });

      debugPrint('CalendarService: –£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è $lessonId');
      return true;
    } catch (e) {
      debugPrint('CalendarService: –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è: $e');
      return false;
    }
  }

  /// –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è
  Future<bool> unregisterFromLesson(String lessonId) async {
    try {
      final currentGroupId = Globals.profileManager.currentGroupId;
      final currentUser = Globals.firebaseAuth.currentUser;
      
      if (currentGroupId == null || currentUser == null) return false;

      final lessonRef = _firestore
          .collection('lessons')
          .doc(currentGroupId)
          .collection('items')
          .doc(lessonId);

      await _firestore.runTransaction((transaction) async {
        final lessonDoc = await transaction.get(lessonRef);
        
        if (!lessonDoc.exists) {
          throw Exception('–ó–∞–Ω—è—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        }

        final data = lessonDoc.data()!;
        final participants = List<String>.from(data['participants'] ?? []);

        if (!participants.contains(currentUser.uid)) {
          throw Exception('–ù–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Ü–µ –∑–∞–Ω—è—Ç—Ç—è');
        }

        participants.remove(currentUser.uid);

        transaction.update(lessonRef, {
          'participants': participants,
          'currentParticipants': participants.length,
          'updatedAt': FieldValue.serverTimestamp(),
        });
      });

      debugPrint('CalendarService: –£—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è $lessonId');
      return true;
    } catch (e) {
      debugPrint('CalendarService: –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: $e');
      return false;
    }
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è
  bool isUserRegisteredForLesson(LessonModel lesson) {
    final currentUser = Globals.firebaseAuth.currentUser;
    if (currentUser == null) return false;
    
    return lesson.participants.contains(currentUser.uid);
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –∑–∞ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
  Future<List<LessonModel>> getLessonsWithFilters({
    required DateTime startDate,
    required DateTime endDate,
    List<String>? tags,
    List<String>? instructors,
    String? status,
  }) async {
    try {
      final currentGroupId = Globals.profileManager.currentGroupId;
      if (currentGroupId == null) return [];

      Query query = _firestore
          .collection('lessons')
          .doc(currentGroupId)
          .collection('items')
          .where('startTime', isGreaterThanOrEqualTo: Timestamp.fromDate(startDate))
          .where('startTime', isLessThanOrEqualTo: Timestamp.fromDate(endDate));

      if (status != null) {
        query = query.where('status', isEqualTo: status);
      }

      final querySnapshot = await query.orderBy('startTime').get();

      var lessons = querySnapshot.docs
          .map((doc) => LessonModel.fromFirestore(doc.data() as Map<String, dynamic>, doc.id))
          .toList();

      // –ö–ª—ñ—î–Ω—Ç—Å—å–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–ª—è tags —Ç–∞ instructors
      if (tags != null && tags.isNotEmpty) {
        lessons = lessons.where((lesson) =>
            lesson.tags.any((tag) => tags.contains(tag))).toList();
      }

      if (instructors != null && instructors.isNotEmpty) {
        lessons = lessons.where((lesson) =>
            instructors.contains(lesson.instructorId)).toList();
      }

      return lessons;
    } catch (e) {
      debugPrint('CalendarService: –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–Ω—è—Ç—å: $e');
      return [];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ Stream –∑–∞–Ω—è—Ç—å –¥–ª—è real-time –æ–Ω–æ–≤–ª–µ–Ω—å
  Stream<List<LessonModel>> getLessonsStream({
    required DateTime startDate,
    required DateTime endDate,
  }) {
    final currentGroupId = Globals.profileManager.currentGroupId;
    if (currentGroupId == null) {
      return Stream.value([]);
    }

    return _firestore
        .collection('lessons')
        .doc(currentGroupId)
        .collection('items')
        .where('startTime', isGreaterThanOrEqualTo: Timestamp.fromDate(startDate))
        .where('startTime', isLessThanOrEqualTo: Timestamp.fromDate(endDate))
        .orderBy('startTime')
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => LessonModel.fromFirestore(doc.data(), doc.id))
            .toList());
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–Ω—è—Ç—å
  Future<Map<String, dynamic>> getLessonsStatistics({
    required DateTime startDate,
    required DateTime endDate,
  }) async {
    final lessons = await getLessonsForPeriod(
      startDate: startDate,
      endDate: endDate,
    );

    final totalLessons = lessons.length;
    final completedLessons = lessons.where((l) => l.status == 'completed').length;
    final scheduledLessons = lessons.where((l) => l.status == 'scheduled').length;
    final cancelledLessons = lessons.where((l) => l.status == 'cancelled').length;

    final totalCapacity = lessons.fold<int>(0, (sum, lesson) => sum + lesson.maxParticipants);

    return {
      'totalLessons': totalLessons,
      'completedLessons': completedLessons,
      'scheduledLessons': scheduledLessons,
      'cancelledLessons': cancelledLessons,
      'totalCapacity': totalCapacity,
    };
  }

  /// –í–∑—è—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ —Å–µ–±–µ (—è–∫ —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
Future<bool> takeLesson(String lessonId) async {
    try {
      final currentUser = Globals.firebaseAuth.currentUser;
      if (currentUser == null) return false;

      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ProfileManager
      final instructorName = Globals.profileManager.currentUserName;

      final success = await updateLesson(lessonId, {
        'instructorId': currentUser.uid,
        'instructorName': instructorName.isEmpty ? '–í–∏–∫–ª–∞–¥–∞—á' : instructorName,
        // –ù–ï –∑–º—ñ–Ω—é—î–º–æ participants - —Ü–µ –¥–ª—è —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑–∞–Ω—è—Ç—Ç—è, –Ω–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
      });

      return success;
    } catch (e) {
      debugPrint('CalendarService: –ü–æ–º–∏–ª–∫–∞ –≤–∑—è—Ç—Ç—è –∑–∞–Ω—è—Ç—Ç—è: $e');
      return false;
    }
  }

  /// –í—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è –≤—ñ–¥ –∑–∞–Ω—è—Ç—Ç—è (—è–∫ —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä)
  Future<bool> releaseLesson(String lessonId) async {
    try {
      final success = await updateLesson(lessonId, {
        'instructorId': '',
        'instructorName': '',
      });

      return success;
    } catch (e) {
      debugPrint('CalendarService: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—É—Å–∫—É –∑–∞–Ω—è—Ç—Ç—è: $e');
      return false;
    }
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–µ–¥–µ —Ü–µ –∑–∞–Ω—è—Ç—Ç—è
 bool isUserInstructorForLesson(LessonModel lesson) {
    final currentUser = Globals.firebaseAuth.currentUser;
    if (currentUser == null) return false;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ –Ω–æ–≤–∏–π —Å–ø–æ—Å—ñ–± (UID), —ñ —Å—Ç–∞—Ä–∏–π (—ñ–º'—è/email) –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    return lesson.instructorId == currentUser.uid ||
           lesson.instructorName == currentUser.email ||
           lesson.instructorName == Globals.profileManager.currentUserName;
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∑–∞–Ω—è—Ç—Ç—è –ø–æ—Ç—Ä–µ–±—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
 bool doesLessonNeedInstructor(LessonModel lesson) {
    return lesson.instructorId.isEmpty;
  }
}