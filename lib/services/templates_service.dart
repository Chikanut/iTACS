// lib/services/group_templates_service.dart - –§—ñ–Ω–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—ñ–¥–∫–æ–ª–µ–∫—Ü—ñ—è–º–∏

import 'package:flutter/foundation.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:convert';
import 'dart:async';
import '../globals.dart';

// –ï–Ω—É–º –¥–ª—è —Ç–∏–ø—ñ–≤ —Ç–µ–º–ø–ª–µ–π—Ç—ñ–≤
enum TemplateType {
  lesson('lesson', '–ó–∞–Ω—è—Ç—Ç—è', 'üìö'),
  event('event', '–ü–æ–¥—ñ—è', 'üéØ'),
  meeting('meeting', '–ù–∞—Ä–∞–¥–∞', 'üë•'),
  inspection('inspection', '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞', 'üîç'),
  training('training', '–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', 'üí™'),
  ceremony('ceremony', '–¶–µ—Ä–µ–º–æ–Ω—ñ—è', 'üéñÔ∏è'),
  maintenance('maintenance', '–û–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è', 'üîß'),
  other('other', '–Ü–Ω—à–µ', 'üìã');

  const TemplateType(this.id, this.displayName, this.emoji);
  
  final String id;
  final String displayName;
  final String emoji;
  
  static TemplateType fromId(String id) {
    return TemplateType.values.firstWhere(
      (type) => type.id == id,
      orElse: () => TemplateType.other,
    );
  }
}

class GroupTemplate {
  final String id;
  final String title;
  final String description;
  final String location;
  final String unit;
  final List<String> tags;
  final int durationMinutes;
  final TemplateType type;
  final bool isDefault;
  final String groupId;
  final String createdBy;
  final DateTime createdAt;
  final DateTime updatedAt;
  final Map<String, dynamic> customFields;

  GroupTemplate({
    required this.id,
    required this.title,
    required this.description,
    required this.location,
    required this.unit,
    required this.tags,
    required this.durationMinutes,
    required this.type,
    this.isDefault = false,
    required this.groupId,
    required this.createdBy,
    required this.createdAt,
    required this.updatedAt,
    this.customFields = const {},
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'title': title,
    'description': description,
    'location': location,
    'unit': unit,
    'tags': tags,
    'durationMinutes': durationMinutes,
    'type': type.id,
    'isDefault': isDefault,
    'groupId': groupId,
    'createdBy': createdBy,
    'createdAt': createdAt.toIso8601String(),
    'updatedAt': updatedAt.toIso8601String(),
    'customFields': customFields,
  };

  Map<String, dynamic> toFirestore() => {
    'title': title,
    'description': description,
    'location': location,
    'unit': unit,
    'tags': tags,
    'durationMinutes': durationMinutes,
    'type': type.id,
    'isDefault': isDefault,
    'groupId': groupId,
    'createdBy': createdBy,
    'createdAt': Timestamp.fromDate(createdAt),
    'updatedAt': Timestamp.fromDate(updatedAt),
    'customFields': customFields,
  };

  factory GroupTemplate.fromJson(Map<String, dynamic> json) => GroupTemplate(
    id: json['id'] ?? '',
    title: json['title'] ?? '',
    description: json['description'] ?? '',
    location: json['location'] ?? '',
    unit: json['unit'] ?? '',
    tags: List<String>.from(json['tags'] ?? []),
    durationMinutes: json['durationMinutes'] ?? 90,
    type: TemplateType.fromId(json['type'] ?? 'other'),
    isDefault: json['isDefault'] ?? false,
    groupId: json['groupId'] ?? '',
    createdBy: json['createdBy'] ?? '',
    createdAt: json['createdAt'] is String 
        ? DateTime.parse(json['createdAt'])
        : DateTime.now(),
    updatedAt: json['updatedAt'] is String 
        ? DateTime.parse(json['updatedAt'])
        : DateTime.now(),
    customFields: Map<String, dynamic>.from(json['customFields'] ?? {}),
  );

  factory GroupTemplate.fromFirestore(DocumentSnapshot doc) {
    final data = doc.data() as Map<String, dynamic>;
    return GroupTemplate(
      id: doc.id,
      title: data['title'] ?? '',
      description: data['description'] ?? '',
      location: data['location'] ?? '',
      unit: data['unit'] ?? '',
      tags: List<String>.from(data['tags'] ?? []),
      durationMinutes: data['durationMinutes'] ?? 90,
      type: TemplateType.fromId(data['type'] ?? 'other'),
      isDefault: data['isDefault'] ?? false,
      groupId: data['groupId'] ?? '',
      createdBy: data['createdBy'] ?? '',
      createdAt: data['createdAt'] is Timestamp 
          ? (data['createdAt'] as Timestamp).toDate()
          : DateTime.now(),
      updatedAt: data['updatedAt'] is Timestamp 
          ? (data['updatedAt'] as Timestamp).toDate()
          : DateTime.now(),
      customFields: Map<String, dynamic>.from(data['customFields'] ?? {}),
    );
  }

  GroupTemplate copyWith({
    String? title,
    String? description,
    String? location,
    String? unit,
    List<String>? tags,
    int? durationMinutes,
    TemplateType? type,
    bool? isDefault,
    Map<String, dynamic>? customFields,
  }) => GroupTemplate(
    id: id,
    title: title ?? this.title,
    description: description ?? this.description,
    location: location ?? this.location,
    unit: unit ?? this.unit,
    tags: tags ?? this.tags,
    durationMinutes: durationMinutes ?? this.durationMinutes,
    type: type ?? this.type,
    isDefault: isDefault ?? this.isDefault,
    groupId: groupId,
    createdBy: createdBy,
    createdAt: createdAt,
    updatedAt: DateTime.now(),
    customFields: customFields ?? this.customFields,
  );
}

class GroupTemplatesService {
  static final GroupTemplatesService _instance = GroupTemplatesService._internal();
  factory GroupTemplatesService() => _instance;
  GroupTemplatesService._internal();

  // Hive boxes
  static const String _templatesBoxName = 'group_templates';
  static const String _autoCompleteBoxName = 'group_autocomplete_data';
  
  Box<String>? _templatesBox;
  Box<String>? _autoCompleteBox;

  // –ö–µ—à –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –≥—Ä—É–ø–∏
  String? _currentGroupId;
  List<GroupTemplate> _templates = [];
  Set<String> _locations = {};
  Set<String> _units = {};
  Set<String> _allTags = {};
  
  // –°–ª—É—Ö–∞—á –∑–º—ñ–Ω –≤ Firestore
  StreamSubscription<QuerySnapshot>? _templatesSubscription;
  StreamSubscription<QuerySnapshot>? _autocompleteSubscription;

  Future<void> initialize() async {
    try {
      await _initializeHive();
      await _initializeForCurrentGroup();
      debugPrint('GroupTemplatesService: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: $e');
    }
  }

  Future<void> _initializeHive() async {
    _templatesBox = await Hive.openBox<String>(_templatesBoxName);
    _autoCompleteBox = await Hive.openBox<String>(_autoCompleteBoxName);
  }

  Future<void> _initializeForCurrentGroup() async {
    final groupId = Globals.profileManager.currentGroupId;
    if (groupId == null) {
      debugPrint('GroupTemplatesService: –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä—É–ø–∏');
      return;
    }

    if (_currentGroupId != groupId) {
      await _switchToGroup(groupId);
    }
  }

  Future<void> _switchToGroup(String groupId) async {
    // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–ª—É—Ö–∞—á—ñ
    await _templatesSubscription?.cancel();
    await _autocompleteSubscription?.cancel();
    
    _currentGroupId = groupId;
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ –∫–µ—à—É
    await _loadFromCache(groupId);
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ Firestore
    _startFirestoreListeners(groupId);
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ Firestore —ñ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
    await _syncWithFirestore(groupId);
  }

  void _startFirestoreListeners(String groupId) {
    // –°–ª—É—Ö–∞—á –¥–ª—è —Ç–µ–º–ø–ª–µ–π—Ç—ñ–≤
    _templatesSubscription = FirebaseFirestore.instance
        .collection('groups')
        .doc(groupId)
        .collection('templates')
        .snapshots()
        .listen((snapshot) {
      try {
        _updateTemplatesFromSnapshot(snapshot);
        _saveToCache(groupId);
      } catch (e) {
        debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ —Å–ª—É—Ö–∞—á–∞ —Ç–µ–º–ø–ª–µ–π—Ç—ñ–≤: $e');
      }
    });

    // –°–ª—É—Ö–∞—á –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
    _autocompleteSubscription = FirebaseFirestore.instance
        .collection('groups')
        .doc(groupId)
        .collection('autocomplete_data')
        .snapshots()
        .listen((snapshot) {
      try {
        _updateAutocompleteFromSnapshot(snapshot);
        _saveToCache(groupId);
      } catch (e) {
        debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ —Å–ª—É—Ö–∞—á–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: $e');
      }
    });
  }

  void _updateTemplatesFromSnapshot(QuerySnapshot snapshot) {
    _templates.clear();

    for (final doc in snapshot.docs) {
      try {
        final template = GroupTemplate.fromFirestore(doc);
        _templates.add(template);
      } catch (e) {
        debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–µ–º–ø–ª–µ–π—Ç—É ${doc.id}: $e');
      }
    }

    debugPrint('GroupTemplatesService: –û–Ω–æ–≤–ª–µ–Ω–æ ${_templates.length} —Ç–µ–º–ø–ª–µ–π—Ç—ñ–≤');
  }

  void _updateAutocompleteFromSnapshot(QuerySnapshot snapshot) {
    _locations.clear();
    _units.clear();
    _allTags.clear();

    for (final doc in snapshot.docs) {
      try {
        final data = doc.data() as Map<String, dynamic>;
        final items = List<String>.from(data['items'] ?? []);

        switch (doc.id) {
          case 'locations':
            _locations.addAll(items);
            break;
          case 'units':
            _units.addAll(items);
            break;
          case 'tags':
            _allTags.addAll(items);
            break;
        }
      } catch (e) {
        debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è ${doc.id}: $e');
      }
    }

    // –¢–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –∑ —Ç–µ–º–ø–ª–µ–π—Ç—ñ–≤
    for (final template in _templates) {
      if (template.location.isNotEmpty) _locations.add(template.location);
      if (template.unit.isNotEmpty) _units.add(template.unit);
      _allTags.addAll(template.tags);
    }

    debugPrint('GroupTemplatesService: –û–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: ${_locations.length} –ª–æ–∫–∞—Ü—ñ–π, ${_units.length} –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤, ${_allTags.length} —Ç–µ–≥—ñ–≤');
  }

  Future<void> _syncWithFirestore(String groupId) async {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–º–ø–ª–µ–π—Ç–∏
      final templatesSnapshot = await FirebaseFirestore.instance
          .collection('groups')
          .doc(groupId)
          .collection('templates')
          .get();

      _updateTemplatesFromSnapshot(templatesSnapshot);

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
      final autocompleteSnapshot = await FirebaseFirestore.instance
          .collection('groups')
          .doc(groupId)
          .collection('autocomplete_data')
          .get();

      _updateAutocompleteFromSnapshot(autocompleteSnapshot);

      await _saveToCache(groupId);

      // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ —Ç–µ–º–ø–ª–µ–π—Ç–∏ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
      if (_templates.isEmpty) {
        await _createDefaultTemplates(groupId);
      }
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Firestore: $e');
    }
  }

  Future<void> _createDefaultTemplates(String groupId) async {
    final currentUser = Globals.firebaseAuth.currentUser;
    if (currentUser == null) return;

    final defaultTemplates = _getDefaultTemplatesForGroup(groupId);
    
    try {
      final batch = FirebaseFirestore.instance.batch();
      
      for (final template in defaultTemplates) {
        final docRef = FirebaseFirestore.instance
            .collection('groups')
            .doc(groupId)
            .collection('templates')
            .doc();
        
        batch.set(docRef, template.toFirestore());
      }

      await batch.commit();

      // –¢–∞–∫–æ–∂ —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
      await _createDefaultAutocomplete(groupId);

      debugPrint('GroupTemplatesService: –°—Ç–≤–æ—Ä–µ–Ω–æ ${defaultTemplates.length} –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö —Ç–µ–º–ø–ª–µ–π—Ç—ñ–≤');
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö —Ç–µ–º–ø–ª–µ–π—Ç—ñ–≤: $e');
    }
  }

  Future<void> _createDefaultAutocomplete(String groupId) async {
    try {
      final autocompleteRef = FirebaseFirestore.instance
          .collection('groups')
          .doc(groupId)
          .collection('autocomplete_data');

      final batch = FirebaseFirestore.instance.batch();

      batch.set(autocompleteRef.doc('locations'), {
        'items': _getDefaultLocations(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      batch.set(autocompleteRef.doc('units'), {
        'items': _getDefaultUnits(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      batch.set(autocompleteRef.doc('tags'), {
        'items': _getDefaultTags(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      await batch.commit();
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: $e');
    }
  }

  List<GroupTemplate> _getDefaultTemplatesForGroup(String groupId) {
    final currentUser = Globals.firebaseAuth.currentUser;
    final now = DateTime.now();

    return [
      GroupTemplate(
        id: '',
        title: '–¢1',
        description: '–ü—Ä–∏–π–æ–º–∏ –ø—Å–∏—Ö—ñ—á–Ω–æ—ó —Å–∞–º–æ—Ä–µ–≥—É–ª—è—Ü—ñ—ó. –ü–µ—Ä—à–∞ –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ —Ç–∞ —Å–∞–º–æ–¥–æ–ø–æ–º–æ–≥–∞',
        location: '–ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–ª–∞—Å',
        unit: '',
        tags: ['–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è', '—Ç–µ–æ—Ä—ñ—è'],
        durationMinutes: 180,
        type: TemplateType.lesson,
        isDefault: true,
        groupId: groupId,
        createdBy: currentUser?.uid ?? 'system',
        createdAt: now,
        updatedAt: now,
      ),
      GroupTemplate(
        id: '',
        title: '–©–æ–¥–µ–Ω–Ω–∞ –ø–ª–∞–Ω–µ—Ä–∫–∞',
        description: '–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –Ω–∞ –¥–µ–Ω—å, —Ä–æ–∑–ø–æ–¥—ñ–ª –æ–±–æ–≤\'—è–∑–∫—ñ–≤',
        location: '–ö–∞–±—ñ–Ω–µ—Ç –∫–æ–º–∞–Ω–¥–∏—Ä–∞',
        unit: '',
        tags: ['–ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è', '–Ω–∞—Ä–∞–¥–∞'],
        durationMinutes: 30,
        type: TemplateType.meeting,
        isDefault: true,
        groupId: groupId,
        createdBy: currentUser?.uid ?? 'system',
        createdAt: now,
        updatedAt: now,
      ),
      GroupTemplate(
        id: '',
        title: '–°—Ç—Ä–æ–π–æ–≤–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞',
        description: '–ó–∞–Ω—è—Ç—Ç—è –∑—ñ —Å—Ç—Ä–æ–π–æ–≤–æ—ó –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏: —Å—Ç—Ä–æ—ó, –ø–æ–≤–æ—Ä–æ—Ç–∏, –ø–µ—Ä–µ—Å—É–≤–∞–Ω–Ω—è',
        location: '–ü–ª–∞—Ü',
        unit: '',
        tags: ['—Å—Ç—Ä–æ–π–æ–≤–∞', '–ø—Ä–∞–∫—Ç–∏–∫–∞'],
        durationMinutes: 90,
        type: TemplateType.training,
        isDefault: true,
        groupId: groupId,
        createdBy: currentUser?.uid ?? 'system',
        createdAt: now,
        updatedAt: now,
      ),
    ];
  }

  List<String> _getDefaultLocations() => [
    '–ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–ª–∞—Å ‚Ññ1', '–ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–ª–∞—Å ‚Ññ2', '–ù–∞–≤—á–∞–ª—å–Ω–∏–π –∫–ª–∞—Å ‚Ññ3',
    '–ê–∫—Ç–æ–≤–∏–π –∑–∞–ª', '–°–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –∑–∞–ª', '–ü–ª–∞—Ü', '–°—Ç—Ä—ñ–ª–µ—Ü—å–∫–∏–π —Ç–∏—Ä',
    '–ù–∞–≤—á–∞–ª—å–Ω–∏–π –ø–æ–ª—ñ–≥–æ–Ω', '–¢–µ—Ö–Ω—ñ—á–Ω–∏–π –ø–∞—Ä–∫', '–ú–∞–π—Å—Ç–µ—Ä–Ω—è', '–á–¥–∞–ª—å–Ω—è',
    '–ö–∞–∑–∞—Ä–º–∞', '–ê–≤—Ç–æ–ø–∞—Ä–∫', '–ú–µ–¥–∏—á–Ω–∏–π –ø—É–Ω–∫—Ç', '–ù–¢–ö –ü–°–ü', '–û–±–∫–∞—Ç–∫–∞ —Ç–∞–Ω–∫–æ–º',
    '–ö–∞–±—ñ–Ω–µ—Ç –∫–æ–º–∞–Ω–¥–∏—Ä–∞'
  ];

  List<String> _getDefaultUnits() => [
    '1 –ù–ë 1 –ù–†', '1 –ù–ë 2 –ù–†', '1 –ù–ë 3 –ù–†', '1 –ù–ë 4 –ù–†', '1 –ù–ë 5 –ù–†',
    '2 –ù–ë 1 –ù–†', '2 –ù–ë 2 –ù–†', '2 –ù–ë 3 –ù–†', '2 –ù–ë 4 –ù–†', '2 –ù–ë 5 –ù–†',
    '–ì—Ä–∞–Ω—ñ—Ç-1 1 –ù–†', '–ì—Ä–∞–Ω—ñ—Ç-1 2 –ù–†', '–ì—Ä–∞–Ω—ñ—Ç-1 3 –ù–†',
    '–ì—Ä–∞–Ω—ñ—Ç-95 1 –ù–†', '–ì—Ä–∞–Ω—ñ—Ç-95 2 –ù–†', '–®–ü–†', '190 –ù–¶'
  ];

  List<String> _getDefaultTags() => [
    '—Ç–∞–∫—Ç–∏–∫–∞', '—Ñ—ñ–∑–∏—á–Ω–∞', '—Å—Ç—Ä–æ–π–æ–≤–∞', '—Ç–µ–æ—Ä—ñ—è', '–ø—Ä–∞–∫—Ç–∏–∫–∞', '—Ç–µ—Ö–Ω—ñ—á–Ω–∞',
    '–≤–æ–¥—ñ–Ω–Ω—è', '—Å—Ç—Ä—ñ–ª—å–±–∏', '–º–µ–¥–∏—á–Ω–∞', '–∑–≤\'—è–∑–æ–∫', '—ñ–Ω–∂–µ–Ω–µ—Ä–Ω–∞', '—Ö—ñ–º–∑–∞—Ö–∏—Å—Ç',
    '—Ç–æ–ø–æ–≥—Ä–∞—Ñ—ñ—è', '—Å—Ç–∞—Ç—É—Ç–∏', '–ø—Å–∏—Ö–æ–ª–æ–≥—ñ—è', '–±—Ä–æ–Ω–µ—Ç–µ—Ö–Ω—ñ–∫–∞', '–∞—Ä—Ç–∏–ª–µ—Ä—ñ—è'
  ];

  // –†–æ–±–æ—Ç–∞ –∑ –∫–µ—à–µ–º
  Future<void> _loadFromCache(String groupId) async {
    try {
      final templatesJson = _templatesBox?.get('templates_$groupId');
      if (templatesJson != null) {
        final List<dynamic> templatesList = json.decode(templatesJson);
        _templates = templatesList
            .map((json) => GroupTemplate.fromJson(json))
            .toList();
      }

      final autoCompleteJson = _autoCompleteBox?.get('autocomplete_$groupId');
      if (autoCompleteJson != null) {
        final data = json.decode(autoCompleteJson);
        _locations = Set<String>.from(data['locations'] ?? []);
        _units = Set<String>.from(data['units'] ?? []);
        _allTags = Set<String>.from(data['tags'] ?? []);
      }
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à—É: $e');
    }
  }

  Future<void> _saveToCache(String groupId) async {
    try {
      final templatesJson = json.encode(_templates.map((t) => t.toJson()).toList());
      await _templatesBox?.put('templates_$groupId', templatesJson);

      final autoCompleteData = {
        'locations': _locations.toList(),
        'units': _units.toList(),
        'tags': _allTags.toList(),
      };
      await _autoCompleteBox?.put('autocomplete_$groupId', json.encode(autoCompleteData));
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à: $e');
    }
  }

  // –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏
  Future<void> ensureInitializedForCurrentGroup() async {
    final groupId = Globals.profileManager.currentGroupId;
    if (groupId != null && _currentGroupId != groupId) {
      await _switchToGroup(groupId);
    }
  }

  List<GroupTemplate> getTemplates([TemplateType? type]) {
    final templates = List<GroupTemplate>.from(_templates);
    if (type != null) {
      return templates.where((t) => t.type == type).toList();
    }
    return templates;
  }

  List<GroupTemplate> getTemplatesByType(TemplateType type) {
    return _templates.where((t) => t.type == type).toList();
  }

  Future<bool> saveTemplate(GroupTemplate template) async {
    try {
      await ensureInitializedForCurrentGroup();
      
      final currentUser = Globals.firebaseAuth.currentUser;
      if (currentUser == null) {
        throw Exception('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
      }

      final groupId = _currentGroupId;
      if (groupId == null) {
        throw Exception('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä—É–ø–∏');
      }

      final templatesRef = FirebaseFirestore.instance
          .collection('groups')
          .doc(groupId)
          .collection('templates');

      final now = DateTime.now();

      if (template.id.isEmpty) {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
        final newTemplate = GroupTemplate(
          id: '',
          title: template.title,
          description: template.description,
          location: template.location,
          unit: template.unit,
          tags: template.tags,
          durationMinutes: template.durationMinutes,
          type: template.type,
          isDefault: template.isDefault,
          groupId: groupId,
          createdBy: currentUser.uid,
          createdAt: now,
          updatedAt: now,
          customFields: template.customFields,
        );

        await templatesRef.add(newTemplate.toFirestore());
      } else {
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ
        final updatedTemplate = template.copyWith();
        await templatesRef.doc(template.id).update(updatedTemplate.toFirestore());
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
      await _updateAutocompleteData();

      return true;
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–º–ø–ª–µ–π—Ç—É: $e');
      return false;
    }
  }

  Future<bool> deleteTemplate(String templateId) async {
    try {
      final groupId = _currentGroupId;
      if (groupId == null) {
        throw Exception('–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä—É–ø–∏');
      }

      await FirebaseFirestore.instance
          .collection('groups')
          .doc(groupId)
          .collection('templates')
          .doc(templateId)
          .delete();

      return true;
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–º–ø–ª–µ–π—Ç—É: $e');
      return false;
    }
  }

  // –ê–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
  List<String> getLocationSuggestions(String query) {
    return _locations
        .where((location) => location.toLowerCase().contains(query.toLowerCase()))
        .take(5)
        .toList();
  }

  List<String> getUnitSuggestions(String query) {
    return _units
        .where((unit) => unit.toLowerCase().contains(query.toLowerCase()))
        .take(5)
        .toList();
  }

  List<String> getTagSuggestions(String query) {
    return _allTags
        .where((tag) => tag.toLowerCase().contains(query.toLowerCase()))
        .take(10)
        .toList();
  }

  Future<void> addLocation(String location) async {
    if (location.trim().isNotEmpty) {
      _locations.add(location.trim());
      await _updateAutocompleteData();
    }
  }

  Future<void> addUnit(String unit) async {
    if (unit.trim().isNotEmpty) {
      _units.add(unit.trim());
      await _updateAutocompleteData();
    }
  }

  Future<void> addTag(String tag) async {
    if (tag.trim().isNotEmpty) {
      _allTags.add(tag.trim().toLowerCase());
      await _updateAutocompleteData();
    }
  }

  Future<void> _updateAutocompleteData() async {
    try {
      final groupId = _currentGroupId;
      if (groupId == null) return;

      final autocompleteRef = FirebaseFirestore.instance
          .collection('groups')
          .doc(groupId)
          .collection('autocomplete_data');

      final batch = FirebaseFirestore.instance.batch();

      batch.set(autocompleteRef.doc('locations'), {
        'items': _locations.toList(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      batch.set(autocompleteRef.doc('units'), {
        'items': _units.toList(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      batch.set(autocompleteRef.doc('tags'), {
        'items': _allTags.toList(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      await batch.commit();
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: $e');
    }
  }

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –∑ —Ç–µ–º–ø–ª–µ–π—Ç—ñ–≤
  Map<String, dynamic> createEventFromTemplate(GroupTemplate template) {
    return {
      'title': template.title,
      'description': template.description,
      'location': template.location,
      'unit': template.unit,
      'tags': List.from(template.tags),
      'durationMinutes': template.durationMinutes,
      'type': template.type.id,
      'customFields': Map.from(template.customFields),
    };
  }

  // –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ LessonModel
  Map<String, dynamic> createLessonFromTemplate(GroupTemplate template) {
    if (template.type != TemplateType.lesson) {
      debugPrint('GroupTemplatesService: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–µ-—É—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–º–ø–ª–µ–π—Ç—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É');
    }
    return createEventFromTemplate(template);
  }

  // –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
  Future<void> clearAllData() async {
    try {
      await _templatesSubscription?.cancel();
      await _autocompleteSubscription?.cancel();
      
      _templates.clear();
      _locations.clear();
      _units.clear();
      _allTags.clear();
      
      await _templatesBox?.clear();
      await _autoCompleteBox?.clear();
      
      _currentGroupId = null;
    } catch (e) {
      debugPrint('GroupTemplatesService: –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: $e');
    }
  }

  // –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Ä–≤—ñ—Å—É
  Future<void> dispose() async {
    await _templatesSubscription?.cancel();
    await _autocompleteSubscription?.cancel();
    await _templatesBox?.close();
    await _autoCompleteBox?.close();
  }

  // –ì–µ—Ç—Ç–µ—Ä–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  int get templatesCount => _templates.length;
  int get locationsCount => _locations.length;
  int get unitsCount => _units.length;
  int get tagsCount => _allTags.length;
  
  Map<TemplateType, int> get templatesByType {
    final Map<TemplateType, int> counts = {};
    for (final template in _templates) {
      counts[template.type] = (counts[template.type] ?? 0) + 1;
    }
    return counts;
  }

  String? get currentGroupId => _currentGroupId;
}