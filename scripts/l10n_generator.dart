#!/usr/bin/env dart

import 'dart:io';
import 'dart:convert';

/// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ñ–∞–π–ª—ñ–≤ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
void main(List<String> args) async {
  print('üåç –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó...\n');
  
  final extractFromAnalysis = args.contains('--from-analysis');
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
  await createL10nStructure();
  
  if (extractFromAnalysis) {
    print('üìù –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç–∏ –∑ –∞–Ω–∞–ª—ñ–∑—É...');
    await extractTextsFromCode();
  } else {
    print('üìù –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ —Ñ–∞–π–ª–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó...');
    await createBaseL10nFiles();
  }
  
  await createL10nConfig();
  
  print('‚úÖ –§–∞–π–ª–∏ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω—ñ!');
  print('üîÑ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
  print('   1. flutter pub get');
  print('   2. flutter gen-l10n');
  print('   3. –î–æ–¥–∞–π—Ç–µ import –¥–æ main.dart');
}

Future<void> createL10nStructure() async {
  final l10nDir = Directory('lib/l10n');
  await l10nDir.create(recursive: true);
  print('üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: ${l10nDir.path}');
}

Future<void> createL10nConfig() async {
  final configContent = '''# l10n.yaml
arb-dir: lib/l10n
template-arb-file: app_en.arb
output-localization-file: app_localizations.dart
output-class: AppLocalizations
output-dir: lib/generated/l10n
nullable-getter: false
''';
  
  final configFile = File('l10n.yaml');
  await configFile.writeAsString(configContent);
  print('‚öôÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ l10n.yaml');
}

Future<void> createBaseL10nFiles() async {
  // –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –≤—ñ–π—Å—å–∫–æ–≤–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
  final baseTranslations = {
    // –ó–∞–≥–∞–ª—å–Ω—ñ
    'appTitle': 'GSPP Training App',
    'loading': '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...',
    'error': '–ü–æ–º–∏–ª–∫–∞',
    'success': '–£—Å–ø—ñ—à–Ω–æ',
    'cancel': '–°–∫–∞—Å—É–≤–∞—Ç–∏',
    'save': '–ó–±–µ—Ä–µ–≥—Ç–∏',
    'delete': '–í–∏–¥–∞–ª–∏—Ç–∏',
    'edit': '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏',
    'add': '–î–æ–¥–∞—Ç–∏',
    'search': '–ü–æ—à—É–∫',
    'refresh': '–û–Ω–æ–≤–∏—Ç–∏',
    
    // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    'home': '–ì–æ–ª–æ–≤–Ω–∞',
    'calendar': '–ö–∞–ª–µ–Ω–¥–∞—Ä',
    'materials': '–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏',
    'tools': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏',
    'profile': '–ü—Ä–æ—Ñ—ñ–ª—å',
    'adminPanel': '–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å',
    
    // –ö–∞–ª–µ–Ω–¥–∞—Ä
    'schedule': '–†–æ–∑–∫–ª–∞–¥',
    'lesson': '–ó–∞–Ω—è—Ç—Ç—è',
    'lessons': '–ó–∞–Ω—è—Ç—Ç—è',
    'today': '–°—å–æ–≥–æ–¥–Ω—ñ',
    'tomorrow': '–ó–∞–≤—Ç—Ä–∞',
    'thisWeek': '–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å',
    'nextWeek': '–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å',
    'noLessonsToday': '–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞–Ω—è—Ç—å –Ω–µ–º–∞—î',
    'lessonCompleted': '–ó–∞–Ω—è—Ç—Ç—è –ø—Ä–æ–≤–µ–¥–µ–Ω–µ',
    'lessonPending': '–û—á—ñ–∫—É—î –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è',
    'lessonIncomplete': '–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–µ',
    
    // –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏
    'methodology': '–ú–µ—Ç–æ–¥–∏—á–∫–∞',
    'methodologies': '–ú–µ—Ç–æ–¥–∏—á–∫–∏',
    'template': '–®–∞–±–ª–æ–Ω',
    'templates': '–®–∞–±–ª–æ–Ω–∏',
    'document': '–î–æ–∫—É–º–µ–Ω—Ç',
    'documents': '–î–æ–∫—É–º–µ–Ω—Ç–∏',
    'downloadedMaterials': '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏',
    
    // –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
    'tool': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
    'folder': '–ü–∞–ø–∫–∞',
    'file': '–§–∞–π–ª',
    'openTool': '–í—ñ–¥–∫—Ä–∏—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
    'addTool': '–î–æ–¥–∞—Ç–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
    'addFolder': '–î–æ–¥–∞—Ç–∏ –ø–∞–ø–∫—É',
    'toolsNotFound': '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ',
    'addFirstTool': '–î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–±–æ –ø–∞–ø–∫—É',
    
    // –ü—Ä–æ—Ñ—ñ–ª—å
    'personalInfo': '–û—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ',
    'militaryRank': '–í—ñ–π—Å—å–∫–æ–≤–µ –∑–≤–∞–Ω–Ω—è',
    'position': '–ü–æ—Å–∞–¥–∞',
    'unit': '–ü—ñ–¥—Ä–æ–∑–¥—ñ–ª',
    'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
    'email': '–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞',
    'signOut': '–í–∏–π—Ç–∏',
    
    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    'accessDenied': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π',
    'notAuthorized': '–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å–∏—Å—Ç–µ–º–∏',
    'checkEmailWhitelist': '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤–∞—à–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ–¥–∞–Ω–∞ –¥–æ –±—ñ–ª–æ–≥–æ —Å–ø–∏—Å–∫—É',
    'contactAdministrator': '–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
    
    // –ü–æ–º–∏–ª–∫–∏
    'networkError': '–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ',
    'noInternetConnection': '–í—ñ–¥—Å—É—Ç–Ω—î –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º',
    'serverError': '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    'unknownError': '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞',
    'tryAgain': '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑',
    
    // –°—Ç–∞—Ç—É—Å–∏
    'draft': '–ß–µ—Ä–Ω–µ—Ç–∫–∞',
    'inProgress': '–í –ø—Ä–æ—Ü–µ—Å—ñ',
    'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
    'archived': '–ê—Ä—Ö—ñ–≤',
    'active': '–ê–∫—Ç–∏–≤–Ω–∏–π',
    'inactive': '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π',
  };
  
  // –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏
  final enTranslations = {
    'appTitle': 'GSPP Training App',
    'loading': 'Loading...',
    'error': 'Error',
    'success': 'Success',
    'cancel': 'Cancel',
    'save': 'Save',
    'delete': 'Delete',
    'edit': 'Edit',
    'add': 'Add',
    'search': 'Search',
    'refresh': 'Refresh',
    
    'home': 'Home',
    'calendar': 'Calendar',
    'materials': 'Materials',
    'tools': 'Tools',
    'profile': 'Profile',
    'adminPanel': 'Admin Panel',
    
    'schedule': 'Schedule',
    'lesson': 'Lesson',
    'lessons': 'Lessons',
    'today': 'Today',
    'tomorrow': 'Tomorrow',
    'thisWeek': 'This Week',
    'nextWeek': 'Next Week',
    'noLessonsToday': 'No lessons today',
    'lessonCompleted': 'Lesson completed',
    'lessonPending': 'Pending',
    'lessonIncomplete': 'Incomplete',
    
    'methodology': 'Methodology',
    'methodologies': 'Methodologies',
    'template': 'Template',
    'templates': 'Templates',
    'document': 'Document',
    'documents': 'Documents',
    'downloadedMaterials': 'Downloaded Materials',
    
    'tool': 'Tool',
    'folder': 'Folder',
    'file': 'File',
    'openTool': 'Open Tool',
    'addTool': 'Add Tool',
    'addFolder': 'Add Folder',
    'toolsNotFound': 'No tools found',
    'addFirstTool': 'Add your first tool or folder',
    
    'personalInfo': 'Personal Information',
    'militaryRank': 'Military Rank',
    'position': 'Position',
    'unit': 'Unit',
    'phone': 'Phone',
    'email': 'Email',
    'signOut': 'Sign Out',
    
    'accessDenied': 'Access Denied',
    'notAuthorized': 'You are not authorized to access this system',
    'checkEmailWhitelist': 'Please check if your email is added to the whitelist',
    'contactAdministrator': 'Contact the administrator',
    
    'networkError': 'Network Error',
    'noInternetConnection': 'No Internet Connection',
    'serverError': 'Server Error',
    'unknownError': 'Unknown Error',
    'tryAgain': 'Try Again',
    
    'draft': 'Draft',
    'inProgress': 'In Progress',
    'completed': 'Completed',
    'archived': 'Archived',
    'active': 'Active',
    'inactive': 'Inactive',
  };
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ ARB —Ñ–∞–π–ª–∏
  await createArbFile('lib/l10n/app_uk.arb', baseTranslations, 'uk');
  await createArbFile('lib/l10n/app_en.arb', enTranslations, 'en');
  
  print('üìù –°—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–∑–æ–≤—ñ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤');
}

Future<void> createArbFile(String path, Map<String, String> translations, String locale) async {
  final arbData = <String, dynamic>{
    '@@locale': locale,
  };
  
  translations.forEach((key, value) {
    arbData[key] = value;
  });
  
  final file = File(path);
  await file.writeAsString(
    const JsonEncoder.withIndent('  ').convert(arbData),
  );
  
  print('üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ: $path (${translations.length} –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤)');
}

Future<void> extractTextsFromCode() async {
  print('üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∫–æ–¥—É –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—ñ–≤...');
  
  final libDir = Directory('lib');
  final extractedTexts = <String>{};
  
  await for (final entity in libDir.list(recursive: true)) {
    if (entity is File && entity.path.endsWith('.dart')) {
      final content = await entity.readAsString();
      
      // –í–∏—Ç—è–≥—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Ç–µ–∫—Å—Ç–∏
      final ukrainianRegex = RegExp(r"['\"][–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë][^'\"]*['\"]");
      final matches = ukrainianRegex.allMatches(content);
      
      for (final match in matches) {
        final text = match.group(0)?.replaceAll(RegExp(r"['\"]"), '') ?? '';
        if (text.length > 2 && !text.contains('http')) {
          extractedTexts.add(text);
        }
      }
    }
  }
  
  print('üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${extractedTexts.length} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤');
  
  // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª—é—á—ñ —Ç–∞ —Ñ–∞–π–ª–∏
  final translations = <String, String>{};
  for (final text in extractedTexts) {
    final key = generateKeyFromText(text);
    translations[key] = text;
  }
  
  await createArbFile('lib/l10n/app_uk.arb', translations, 'uk');
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è
  final englishTranslations = <String, String>{};
  translations.forEach((key, _) {
    englishTranslations[key] = 'TODO: Translate "$_"';
  });
  
  await createArbFile('lib/l10n/app_en.arb', englishTranslations, 'en');
}

String generateKeyFromText(String text) {
  // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª—é—á –∑ —Ç–µ–∫—Å—Ç—É
  String key = text
      .toLowerCase()
      .replaceAll(RegExp(r'[^–∞-—è—ñ—ó—î“ëa-z0-9\s]'), '')
      .trim()
      .replaceAll(RegExp(r'\s+'), '_');
      
  // –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –∫–ª—é—á–∞
  if (key.length > 30) {
    final words = key.split('_');
    key = words.take(3).join('_');
  }
  
  // –Ø–∫—â–æ –∫–ª—é—á –ø–æ—Ä–æ–∂–Ω—ñ–π, –≥–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π
  if (key.isEmpty) {
    key = 'text_${DateTime.now().millisecondsSinceEpoch % 10000}';
  }
  
  return key;
}