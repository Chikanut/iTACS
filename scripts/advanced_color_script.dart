#!/usr/bin/env dart

import 'dart:io';

/// –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó –∑ backup —Ç–∞ smart detection
void main(List<String> args) async {
  print('üé® –†–æ–∑—É–º–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –∫–æ–ª—å–æ—Ä—ñ–≤...\n');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
  final dryRun = args.contains('--dry-run');
  final backup = args.contains('--backup') || !args.contains('--no-backup');
  
  if (dryRun) {
    print('üîç –†–ï–ñ–ò–ú –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ü–ï–†–ï–ì–õ–Ø–î–£ (–±–µ–∑ –∑–º—ñ–Ω)');
  }
  
  final libDir = Directory('lib');
  if (!libDir.existsSync()) {
    print('‚ùå –ü–∞–ø–∫–∞ lib –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ backup —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
  if (backup && !dryRun) {
    await createBackup();
  }

  final analyzer = ColorAnalyzer();
  await analyzer.analyzeDirectory(libDir, dryRun);
  analyzer.printReport();
  
  if (dryRun) {
    print('\nüîÑ –î–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–º—ñ–Ω –∑–∞–ø—É—Å—Ç—ñ—Ç—å: dart scripts/advanced_migrate_colors.dart');
  } else {
    print('\n‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    print('üîç –ü–µ—Ä–µ–≤—ñ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç: flutter analyze && flutter run');
  }
}

class ColorAnalyzer {
  int filesProcessed = 0;
  int totalReplacements = 0;
  Map<String, int> replacementStats = {};
  List<String> problematicFiles = [];
  
  // –†–æ–∑—É–º–Ω—ñ –∑–∞–º—ñ–Ω–∏ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  final smartReplacements = <SmartReplacement>[
    // –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–ª—å–æ—Ä–∏
    SmartReplacement(
      pattern: r'Colors\.white(?!\w)',
      replacement: 'Theme.of(context).colorScheme.onSurface',
      context: 'text',
      description: '–ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç ‚Üí onSurface',
    ),
    
    SmartReplacement(
      pattern: r'Colors\.white(?=.*foregroundColor)',
      replacement: 'Theme.of(context).colorScheme.onPrimary',
      context: 'button',
      description: '–ë—ñ–ª–∏–π –Ω–∞ –∫–Ω–æ–ø—Ü—ñ ‚Üí onPrimary',
    ),
    
    // –ü–∞–ø–∫–∏ —Ç–∞ —Ñ–∞–π–ª–∏
    SmartReplacement(
      pattern: r'Colors\.amber\[700\](?=.*folder|.*–ø–∞–ø–∫)',
      replacement: 'Theme.of(context).colorScheme.secondary',
      context: 'folder',
      description: '–ü–∞–ø–∫–∏ ‚Üí secondary',
    ),
    
    SmartReplacement(
      pattern: r'Colors\.blue\[700\](?=.*file|.*—Ñ–∞–π–ª)',
      replacement: 'Theme.of(context).colorScheme.primary',
      context: 'file',
      description: '–§–∞–π–ª–∏ ‚Üí primary',
    ),
    
    // –§–æ–Ω–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ö–Ω—ñ
    SmartReplacement(
      pattern: r'Colors\.grey\.withOpacity\(0\.1\)(?=.*background|.*decoration)',
      replacement: 'Theme.of(context).colorScheme.surfaceContainer',
      context: 'background',
      description: '–°—ñ—Ä–∏–π —Ñ–æ–Ω ‚Üí surfaceContainer',
    ),
    
    // –¢–µ–∫—Å—Ç–∏
    SmartReplacement(
      pattern: r'Colors\.grey\[600\](?=.*style|.*color)',
      replacement: 'Theme.of(context).colorScheme.onSurfaceVariant',
      context: 'text',
      description: '–°—ñ—Ä–∏–π —Ç–µ–∫—Å—Ç ‚Üí onSurfaceVariant',
    ),
    
    // –ü–æ–º–∏–ª–∫–∏
    SmartReplacement(
      pattern: r'Colors\.red(?=.*error|.*danger|.*–ø–æ–º–∏–ª–∫)',
      replacement: 'Theme.of(context).colorScheme.error',
      context: 'error',
      description: '–ß–µ—Ä–≤–æ–Ω–∏–π ‚Üí error',
    ),
  ];
  
  Future<void> analyzeDirectory(Directory dir, bool dryRun) async {
    await for (final entity in dir.list(recursive: true)) {
      if (entity is File && entity.path.endsWith('.dart')) {
        if (shouldSkipFile(entity.path)) continue;
        
        try {
          await processFile(entity, dryRun);
          filesProcessed++;
        } catch (e) {
          problematicFiles.add('${entity.path}: $e');
        }
      }
    }
  }
  
  bool shouldSkipFile(String path) {
    final skipPatterns = [
      '.g.dart',
      '.freezed.dart', 
      'firebase_options.dart',
      '/generated/',
    ];
    
    return skipPatterns.any((pattern) => path.contains(pattern));
  }
  
  Future<void> processFile(File file, bool dryRun) async {
    String content = await file.readAsString();
    final originalContent = content;
    final fileReplacements = <String, int>{};
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î BuildContext –≤ —Ñ–∞–π–ª—ñ
    final hasContext = content.contains('BuildContext') || 
                      content.contains('Theme.of(context)');
    
    if (!hasContext && content.contains('Colors.')) {
      // –§–∞–π–ª –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫–æ–ª—å–æ—Ä–∏ –∞–ª–µ –Ω–µ–º–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      if (!dryRun) {
        await addMaterialImport(file, content);
      }
    }
    
    // –í–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–∑—É–º–Ω—ñ –∑–∞–º—ñ–Ω–∏
    for (final replacement in smartReplacements) {
      final regex = RegExp(replacement.pattern, multiLine: true, dotAll: true);
      final matches = regex.allMatches(content);
      
      if (matches.isNotEmpty) {
        content = content.replaceAll(regex, replacement.replacement);
        fileReplacements[replacement.description] = matches.length;
        totalReplacements += matches.length;
      }
    }
    
    // –î–æ–¥–∞—î–º–æ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    fileReplacements.forEach((desc, count) {
      replacementStats[desc] = (replacementStats[desc] ?? 0) + count;
    });
    
    // –ó–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª
    if (!dryRun && content != originalContent) {
      await file.writeAsString(content);
      print('üìù ${file.path}: ${fileReplacements.values.fold(0, (a, b) => a + b)} –∑–∞–º—ñ–Ω');
    } else if (dryRun && content != originalContent) {
      print('üîç ${file.path}: ${fileReplacements.values.fold(0, (a, b) => a + b)} –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –∑–∞–º—ñ–Ω');
    }
  }
  
  Future<void> addMaterialImport(File file, String content) async {
    if (!content.contains("import 'package:flutter/material.dart'")) {
      final lines = content.split('\n');
      final importIndex = lines.indexWhere((line) => line.startsWith('import '));
      
      if (importIndex != -1) {
        lines.insert(importIndex, "import 'package:flutter/material.dart';");
        await file.writeAsString(lines.join('\n'));
      }
    }
  }
  
  void printReport() {
    print('\nüìä –ó–í–Ü–¢ –ú–Ü–ì–†–ê–¶–Ü–á:');
    print('   ‚Ä¢ –§–∞–π–ª—ñ–≤ –æ–±—Ä–æ–±–ª–µ–Ω–æ: $filesProcessed');
    print('   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º—ñ–Ω: $totalReplacements');
    
    if (replacementStats.isNotEmpty) {
      print('\nüîÑ –î–µ—Ç–∞–ª—ñ –∑–∞–º—ñ–Ω:');
      replacementStats.forEach((desc, count) {
        print('   ‚Ä¢ $desc: $count');
      });
    }
    
    if (problematicFiles.isNotEmpty) {
      print('\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ñ —Ñ–∞–π–ª–∏:');
      for (final issue in problematicFiles) {
        print('   ‚Ä¢ $issue');
      }
    }
  }
}

class SmartReplacement {
  final String pattern;
  final String replacement;
  final String context;
  final String description;
  
  SmartReplacement({
    required this.pattern,
    required this.replacement,
    required this.context,
    required this.description,
  });
}

Future<void> createBackup() async {
  final timestamp = DateTime.now().millisecondsSinceEpoch;
  final backupDir = Directory('backup_$timestamp');
  
  print('üíæ –°—Ç–≤–æ—Ä—é—é backup...');
  
  await backupDir.create();
  await copyDirectory(Directory('lib'), Directory('${backupDir.path}/lib'));
  
  print('‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${backupDir.path}');
}

Future<void> copyDirectory(Directory source, Directory destination) async {
  await destination.create(recursive: true);
  
  await for (final entity in source.list()) {
    if (entity is Directory) {
      await copyDirectory(
        entity,
        Directory('${destination.path}/${entity.path.split('/').last}')
      );
    } else if (entity is File) {
      await entity.copy('${destination.path}/${entity.path.split('/').last}');
    }
  }
}