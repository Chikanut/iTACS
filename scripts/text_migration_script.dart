#!/usr/bin/env dart

import 'dart:io';
import 'dart:convert';

/// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –∑–∞–º—ñ–Ω–∏ hardcoded —Ç–µ–∫—Å—Ç—ñ–≤ –Ω–∞ AppLocalizations
void main(List<String> args) async {
  print('üåç –ú—ñ–≥—Ä–∞—Ü—ñ—è hardcoded —Ç–µ–∫—Å—Ç—ñ–≤ –¥–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó...\n');
  
  final dryRun = args.contains('--dry-run');
  final generateArb = args.contains('--generate-arb');
  
  if (dryRun) {
    print('üîç –†–ï–ñ–ò–ú –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ü–ï–†–ï–ì–õ–Ø–î–£ (–±–µ–∑ –∑–º—ñ–Ω)');
  }
  
  final migrator = TextMigrator();
  
  if (generateArb) {
    await migrator.generateArbFromExistingTexts();
  }
  
  final libDir = Directory('lib');
  if (!libDir.existsSync()) {
    print('‚ùå –ü–∞–ø–∫–∞ lib –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }

  await migrator.migrateDirectory(libDir, dryRun);
  migrator.printReport();
}

class TextMigrator {
  final Map<String, String> textToKeyMap = {};
  final List<TextReplacement> replacements = [];
  final List<String> modifiedFiles = [];
  int totalReplacements = 0;

  // –ü—Ä–µ–¥–≤–∏–∑–Ω–∞—á–µ–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è –ø–æ—à–∏—Ä–µ–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
  final predefinedTranslations = {
    // –ó–∞–≥–∞–ª—å–Ω—ñ UI –µ–ª–µ–º–µ–Ω—Ç–∏
    '–ì–æ–ª–æ–≤–Ω–∞': 'home',
    '–ö–∞–ª–µ–Ω–¥–∞—Ä': 'calendar',
    '–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏': 'materials',
    '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏': 'tools',
    '–ü—Ä–æ—Ñ—ñ–ª—å': 'profile',
    '–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å': 'adminPanel',
    
    // –î—ñ—ó
    '–î–æ–¥–∞—Ç–∏': 'add',
    '–í–∏–¥–∞–ª–∏—Ç–∏': 'delete',
    '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏': 'edit',
    '–ó–±–µ—Ä–µ–≥—Ç–∏': 'save',
    '–°–∫–∞—Å—É–≤–∞—Ç–∏': 'cancel',
    '–û–Ω–æ–≤–∏—Ç–∏': 'refresh',
    '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...': 'loading',
    '–ü–æ—à—É–∫': 'search',
    
    // –ó–∞–Ω—è—Ç—Ç—è
    '–ó–∞–Ω—è—Ç—Ç—è': 'lessons',
    '–†–æ–∑–∫–ª–∞–¥': 'schedule',
    '–°—å–æ–≥–æ–¥–Ω—ñ': 'today',
    '–ó–∞–≤—Ç—Ä–∞': 'tomorrow',
    '–ü—Ä–æ–≤–µ–¥–µ–Ω–µ': 'completed',
    '–û—á—ñ–∫—É—î': 'pending',
    '–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–µ': 'incomplete',
    
    // –°—Ç–∞—Ç—É—Å–∏
    '–ü–æ–º–∏–ª–∫–∞': 'error',
    '–£—Å–ø—ñ—à–Ω–æ': 'success',
    '–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è': 'warning',
    
    // –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
    '–ø–∞–ø–∫–∞': 'folder',
    '—Ñ–∞–π–ª': 'file',
    '—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç': 'tool',
    '–í—ñ–¥–∫—Ä–∏—Ç–∏': 'open',
    
    // –¢–∏–ø–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    '–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ': 'nothingFound',
    '–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç': 'tryDifferentQuery',
    '–î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–±–æ –ø–∞–ø–∫—É': 'addFirstToolOrFolder',
  };

  Future<void> generateArbFromExistingTexts() async {
    print('üìù –ì–µ–Ω–µ—Ä—É—é ARB —Ñ–∞–π–ª–∏ –∑ predefined –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤...');
    
    final ukTranslations = <String, dynamic>{
      '@@locale': 'uk',
    };
    
    final enTranslations = <String, dynamic>{
      '@@locale': 'en',
    };
    
    // –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –¥–ª—è predefined —Ç–µ–∫—Å—Ç—ñ–≤
    final englishTranslations = {
      'home': 'Home',
      'calendar': 'Calendar',
      'materials': 'Materials',
      'tools': 'Tools',
      'profile': 'Profile',
      'adminPanel': 'Admin Panel',
      'add': 'Add',
      'delete': 'Delete',
      'edit': 'Edit',
      'save': 'Save',
      'cancel': 'Cancel',
      'refresh': 'Refresh',
      'loading': 'Loading...',
      'search': 'Search',
      'lessons': 'Lessons',
      'schedule': 'Schedule',
      'today': 'Today',
      'tomorrow': 'Tomorrow',
      'completed': 'Completed',
      'pending': 'Pending',
      'incomplete': 'Incomplete',
      'error': 'Error',
      'success': 'Success',
      'warning': 'Warning',
      'folder': 'Folder',
      'file': 'File',
      'tool': 'Tool',
      'open': 'Open',
      'nothingFound': 'Nothing Found',
      'tryDifferentQuery': 'Try a different search query',
      'addFirstToolOrFolder': 'Add your first tool or folder',
    };
    
    predefinedTranslations.forEach((ukrainianText, key) {
      ukTranslations[key] = ukrainianText;
      enTranslations[key] = englishTranslations[key] ?? 'TODO: Translate "$ukrainianText"';
      textToKeyMap[ukrainianText] = key;
    });
    
    await _saveArbFile('lib/l10n/app_uk.arb', ukTranslations);
    await _saveArbFile('lib/l10n/app_en.arb', enTranslations);
    
    print('‚úÖ ARB —Ñ–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∑ ${predefinedTranslations.length} –ø–µ—Ä–µ–∫–ª–∞–¥–∞–º–∏');
  }
  
  Future<void> _saveArbFile(String path, Map<String, dynamic> data) async {
    final dir = Directory('lib/l10n');
    await dir.create(recursive: true);
    
    final file = File(path);
    await file.writeAsString(
      const JsonEncoder.withIndent('  ').convert(data),
    );
  }

  Future<void> migrateDirectory(Directory dir, bool dryRun) async {
    await for (final entity in dir.list(recursive: true)) {
      if (entity is File && entity.path.endsWith('.dart')) {
        if (_shouldSkipFile(entity.path)) continue;
        
        try {
          await _processFile(entity, dryRun);
        } catch (e) {
          print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ${entity.path}: $e');
        }
      }
    }
  }
  
  bool _shouldSkipFile(String path) {
    final skipPatterns = [
      '.g.dart',
      '.freezed.dart',
      'firebase_options.dart',
      '/generated/',
      'app_localizations',
      'l10n.dart',
    ];
    
    return skipPatterns.any((pattern) => path.contains(pattern));
  }
  
  Future<void> _processFile(File file, bool dryRun) async {
    String content = await file.readAsString();
    final originalContent = content;
    int fileReplacements = 0;
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è –∑–∞–º—ñ–Ω–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
    final patterns = [
      // Text('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç')
      RegExp(r"Text\(\s*['\"]([–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë][^'\"]*)['\"]"),
      // label: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç'
      RegExp(r"label:\s*['\"]([–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë][^'\"]*)['\"]"),
      // title: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç'
      RegExp(r"title:\s*['\"]([–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë][^'\"]*)['\"]"),
      // '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–∫—Å—Ç' –≤ —Ä—ñ–∑–Ω–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö
      RegExp(r"['\"]([–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë][–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë\s\-\,\.\!\?]{2,})['\"]"),
    ];
    
    for (final pattern in patterns) {
      final matches = pattern.allMatches(content).toList();
      
      for (final match in matches.reversed) { // –û–±—Ä–æ–±–ª—è—î–º–æ –≤ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        final fullMatch = match.group(0) ?? '';
        final ukrainianText = match.group(1) ?? '';
        
        // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä—è–¥–∫–∏
        if (_shouldSkipText(ukrainianText)) continue;
        
        final key = _getKeyForText(ukrainianText);
        if (key == null) continue;
        
        String replacement;
        if (fullMatch.startsWith('Text(')) {
          replacement = "Text(AppLocalizations.of(context).$key)";
        } else if (fullMatch.contains('label:')) {
          replacement = "label: AppLocalizations.of(context).$key";
        } else if (fullMatch.contains('title:')) {
          replacement = "title: AppLocalizations.of(context).$key";
        } else {
          replacement = "AppLocalizations.of(context).$key";
        }
        
        content = content.substring(0, match.start) + 
                 replacement + 
                 content.substring(match.end);
                 
        replacements.add(TextReplacement(
          file: file.path,
          originalText: ukrainianText,
          key: key,
          fullMatch: fullMatch,
          replacement: replacement,
        ));
        
        fileReplacements++;
      }
    }
    
    // –î–æ–¥–∞—î–º–æ import —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (fileReplacements > 0 && !content.contains('AppLocalizations.of(context)')) {
      content = _addLocalizationImport(content);
    }
    
    // –ó–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª
    if (!dryRun && content != originalContent) {
      await file.writeAsString(content);
      modifiedFiles.add(file.path);
      print('üìù ${file.path}: $fileReplacements –∑–∞–º—ñ–Ω');
    } else if (content != originalContent) {
      print('üîç ${file.path}: $fileReplacements –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –∑–∞–º—ñ–Ω');
    }
    
    totalReplacements += fileReplacements;
  }
  
  bool _shouldSkipText(String text) {
    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫—ñ —Ç–µ–∫—Å—Ç–∏
    if (text.length < 3) return true;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä—è–¥–∫–∏
    final skipPatterns = [
      RegExp(r'^[0-9\s\-\+\(\)\.,:;!?]*$'), // –¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –∑–Ω–∞–∫–∏
      RegExp(r'^[A-Za-z_][A-Za-z0-9_]*$'), // –ó–º—ñ–Ω–Ω—ñ
      RegExp(r'http[s]?://'), // URLs
      RegExp(r'@[A-Za-z0-9]'), // Email patterns
    ];
    
    return skipPatterns.any((pattern) => pattern.hasMatch(text));
  }
  
  String? _getKeyForText(String text) {
    // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ predefined –º–∞–ø—ñ
    if (textToKeyMap.containsKey(text)) {
      return textToKeyMap[text];
    }
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    final key = _generateKeyFromText(text);
    textToKeyMap[text] = key;
    return key;
  }
  
  String _generateKeyFromText(String text) {
    String key = text
        .toLowerCase()
        .replaceAll(RegExp(r'[^–∞-—è—ñ—ó—î“ëa-z0-9\s]'), '')
        .trim()
        .replaceAll(RegExp(r'\s+'), '_');
        
    // –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–∞ –±–µ—Ä–µ–º –ø–µ—Ä—à—ñ —Å–ª–æ–≤–∞
    final words = key.split('_');
    if (words.length > 3) {
      key = words.take(3).join('_');
    }
    
    if (key.length > 25) {
      key = key.substring(0, 25);
    }
    
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å —â–æ –∫–ª—é—á —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π
    String finalKey = key;
    int counter = 1;
    while (textToKeyMap.containsValue(finalKey)) {
      finalKey = '${key}_$counter';
      counter++;
    }
    
    return finalKey;
  }
  
  String _addLocalizationImport(String content) {
    if (content.contains('flutter_gen/gen_l10n/app_localizations.dart')) {
      return content;
    }
    
    final lines = content.split('\n');
    final importIndex = lines.indexWhere((line) => line.startsWith('import '));
    
    if (importIndex != -1) {
      lines.insert(importIndex, "import 'package:flutter_gen/gen_l10n/app_localizations.dart';");
    }
    
    return lines.join('\n');
  }
  
  void printReport() {
    print('\nüìä –ó–í–Ü–¢ –ú–Ü–ì–†–ê–¶–Ü–á –¢–ï–ö–°–¢–Ü–í:');
    print('-' * 40);
    print('‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–º—ñ–Ω: $totalReplacements');
    print('‚Ä¢ –ó–º—ñ–Ω–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: ${modifiedFiles.length}');
    print('‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤: ${textToKeyMap.length}');
    
    if (replacements.isNotEmpty) {
      print('\nüî§ –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–º—ñ–Ω:');
      for (final replacement in replacements.take(10)) {
        print('   "${replacement.originalText}" ‚Üí ${replacement.key}');
      }
      
      if (replacements.length > 10) {
        print('   ... —ñ —â–µ ${replacements.length - 10} –∑–∞–º—ñ–Ω');
      }
    }
    
    if (modifiedFiles.isNotEmpty) {
      print('\nüìÅ –ó–º—ñ–Ω–µ–Ω—ñ —Ñ–∞–π–ª–∏:');
      for (final file in modifiedFiles.take(10)) {
        final fileReplacements = replacements.where((r) => r.file == file).length;
        print('   ‚Ä¢ $file ($fileReplacements –∑–∞–º—ñ–Ω)');
      }
      
      if (modifiedFiles.length > 10) {
        print('   ... —ñ —â–µ ${modifiedFiles.length - 10} —Ñ–∞–π–ª—ñ–≤');
      }
    }
    
    print('\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
    print('   1. flutter gen-l10n');
    print('   2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—é: flutter analyze');
    print('   3. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä–µ–∫–ª–∞–¥–∏ –≤ lib/l10n/app_en.arb');
    print('   4. flutter run –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
  }
}

class TextReplacement {
  final String file;
  final String originalText;
  final String key;
  final String fullMatch;
  final String replacement;
  
  TextReplacement({
    required this.file,
    required this.originalText,
    required this.key,
    required this.fullMatch,
    required this.replacement,
  });
}