==== DEPENDENCIES ====
flutter:
sdk: flutter


==== lib\globals.dart ====

📦 IMPORTS:
  import 'package:flutter_application_1/services/error_notification_manager.dart';
  import 'package:firebase_auth/firebase_auth.dart';

🏗️ CLASSES:
  class Globals {

⚙️ METHODS:
    static Future<void> init() async

🏷️ PROPERTIES:
    static final FirebaseAuth firebaseAuth
    static final AuthService authService
    static final ErrorNotificationManager errorNotificationManager
    static final FirestoreManager firestoreManager
    static final ProfileManager profileManager
    static final ReportsService reportsService
    static late FileManager fileManager;

==== lib\main.dart ====

📦 IMPORTS:
  import 'package:flutter/foundation.dart';
  import 'package:flutter/material.dart';
  import 'package:firebase_core/firebase_core.dart';
  import 'package:firebase_auth/firebase_auth.dart';
  import 'package:hive_flutter/hive_flutter.dart';
  import 'package:path_provider/path_provider.dart';
  import 'package:flutter_localizations/flutter_localizations.dart';
  import 'package:intl/date_symbol_data_local.dart';

🏗️ CLASSES:
  class MyApp extends StatelessWidget {

⚙️ METHODS:
  void main() async
  await initializeDateFormatting('uk', null);
  await LessonTemplatesService().initialize();
    const MyApp(
    Widget build(BuildContext context)
    return MaterialApp(

🏷️ PROPERTIES:
  final dir

==== lib\mixins\loading_state_mixin.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';

🔧 MIXINS:
  mixin LoadingStateMixin<T extends StatefulWidget> on State<T> {

⚙️ METHODS:
  void setLoading(String key, bool loading)
  void clearLoading(String key)
  void clearAllLoading()
  Future<T> withLoading<T>(String key, Future<T> Function() operation) async
  throw Exception('Операція вже виконується');

==== lib\pages\access_denied_page.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';

🏗️ CLASSES:
  class AccessDeniedPage extends StatelessWidget {

⚙️ METHODS:
    const AccessDeniedPage(
    Widget build(BuildContext context)
    return Scaffold(
    const Icon(Icons.block, size: 100, color: Colors.redAccent),
    const SizedBox(height: 30),
    const Text(
    const SizedBox(height: 16),
    const Text(
    const SizedBox(height: 32),

==== lib\pages\auth_gate.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:firebase_auth/firebase_auth.dart';

🏗️ CLASSES:
  class AuthGate extends StatelessWidget {

⚙️ METHODS:
    const AuthGate(
    Widget build(BuildContext context)

🏷️ PROPERTIES:
  final user

==== lib\pages\email_check_page.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:firebase_auth/firebase_auth.dart';
  import 'package:flutter_application_1/services/auth_service.dart';
  import '../globals.dart';

🏗️ CLASSES:
  class EmailCheckPage extends StatefulWidget {
  class _EmailCheckPageState extends State<EmailCheckPage> {

⚙️ METHODS:
    const EmailCheckPage(
    void initState()
  Widget build(BuildContext context)

🏷️ PROPERTIES:
  final user
  final isSynced

==== lib\pages\home_page.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:firebase_auth/firebase_auth.dart';
  import 'package:intl/intl.dart';
  import '../globals.dart';
  import '../services/dashboard_service.dart';
  import '../pages/calendar_page/models/lesson_model.dart';
  import '../pages/calendar_page/calendar_utils.dart';
  import '../pages/calendar_page/widgets/lesson_details_dialog.dart';
  import '../services/reports_service.dart';
  import '../services/reports/base_report.dart';
  import '../services/reports/quick_report_dialog.dart';

🏗️ CLASSES:
  class HomePage extends StatefulWidget {
  class _HomePageState extends State<HomePage> {
  class _UpcomingLessonsCard extends StatelessWidget {
  class _TomorrowWithoutInstructorCard extends StatelessWidget {
  class _PersonalStatsCard extends StatelessWidget {
  class _StatItem extends StatelessWidget {
  class _ReportsCard extends StatelessWidget {
  class _ReportButton extends StatelessWidget {
  class _LastUpdatedCard extends StatelessWidget {
  class _EnhancedLessonListTile extends StatelessWidget {

⚙️ METHODS:
    const HomePage(
    void initState()
  Widget build(BuildContext context)
  return Scaffold(
  const SliverFillRemaining(
  return SliverAppBar(
  return SliverList(
  const SizedBox(height: 16),
  const SizedBox(height: 100), // Відступ для навігації
  return SliverFillRemaining(
  const SizedBox(height: 16),
  const SizedBox(height: 8),
  const SizedBox(height: 24),
    Widget build(BuildContext context)
    return Card(
    const SizedBox(width: 8),
    const SizedBox(height: 12),
    Widget build(BuildContext context)
    return Card(
    const SizedBox(width: 8),
    const SizedBox(height: 12),
    Widget build(BuildContext context)
    return Card(
    const SizedBox(width: 8),
    const SizedBox(height: 16),
    Widget build(BuildContext context)
    return Column(
    const SizedBox(height: 12),
    Widget build(BuildContext context)
    return Card(
    const SizedBox(width: 8),
    const SizedBox(height: 12),
  await showQuickReportDialog(
  await showQuickReportDialog(
    Widget build(BuildContext context)
    Widget build(BuildContext context)
    return Padding(
    Widget build(BuildContext context)
  return Padding(
  const SizedBox(width: 12),

🏷️ PROPERTIES:
  final feed
  final feed
  final user
  final now
  final hour
  String greeting;
  final userName
  final upcomingLessons
  final tomorrow
  final currentUser
  final dateCompare
  return dateCompare;
    final VoidCallback? onLessonUpdated;
    final VoidCallback? onLessonUpdated;
    final tomorrow
    final tomorrowFormatted
    final UserStats stats;
    final conductedLessons
    final totalLessons
    final thisWeekLessons
    final thisMonthLessons
    final completionRate
    final incompleteCount
    final String label;
    final String value;
    final IconData icon;
    final Color color;
    final ReportsService reportsService;
  final data
  final fileName
  final data
  final fileName
    final String label;
    final IconData icon;
    final VoidCallback onPressed;
    final DateTime? lastUpdated;
    final LessonModel lesson;
    final bool showWarning;
    final Color? titleColor;
    final VoidCallback? onLessonUpdated;
    final progressStatus
    final readinessStatus
    Color backgroundColor;
    Color textColor
  final now
  final isToday
  final isTomorrow
  String datePrefix

==== lib\pages\login_page.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:firebase_auth/firebase_auth.dart';
  import '../services/auth_service.dart';

🏗️ CLASSES:
  class LoginPage extends StatelessWidget {

⚙️ METHODS:
    const LoginPage(
    Widget build(BuildContext context)
    return Scaffold(

==== lib\pages\main_scaffold.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:firebase_auth/firebase_auth.dart';
  import '../globals.dart';

🏗️ CLASSES:
  class MainScaffold extends StatefulWidget {
  class _MainScaffoldState extends State<MainScaffold> {

⚙️ METHODS:
    const MainScaffold(
    bool isMobileLayout(BuildContext context)
  void initState()
  Widget build(BuildContext context)
  return Scaffold(
  const SizedBox(width: 8),

🏷️ PROPERTIES:
    final shortestSide
  final user
  final email
  final isMobile
  final user
  final initials
  final groupName

==== lib\pages\profile_page.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:firebase_auth/firebase_auth.dart';
  import '../globals.dart';
  import '../services/profile_manager.dart';

🏗️ CLASSES:
  class ProfilePage extends StatefulWidget {
  class _ProfilePageState extends State<ProfilePage> {

⚙️ METHODS:
    const ProfilePage(
    void initState()
  void dispose()
  Widget build(BuildContext context)
  return Scaffold(
  return Scaffold(
  const SizedBox(height: 24),
  const SizedBox(height: 24),
  const SizedBox(height: 24),
  return Card(
  const SizedBox(width: 16),
  return Card(
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  return Card(
  const SizedBox(height: 12),
  return Container(
  return Column(
  const SizedBox(height: 16),
  const Divider(),
  const SizedBox(height: 16),

🏷️ PROPERTIES:
  final profile
  final success
  final shouldSignOut
  final profile
  final role
  final isCurrentGroup

==== lib\pages\calendar_page\calendar_page.dart ====

📦 IMPORTS:
  import 'package:flutter/foundation.dart';
  import 'package:flutter/material.dart';
  import 'package:intl/intl.dart';

🏗️ CLASSES:
  class CalendarPage extends StatefulWidget {
  class _CalendarPageState extends State<CalendarPage> {

⚙️ METHODS:
    const CalendarPage(
    bool isMobile(BuildContext context)
  Widget build(BuildContext context)
  return Scaffold(
  const Text('Календар занять'),
  const SnackBar(
  const SnackBar(
  const Divider(height: 1),

🏷️ PROPERTIES:
    final shortestSide
  final startOfCurrentWeek
  final startOfCurrentWeek
  final startOfWeek
  final endOfWeek
  final isOnMobileDevice
  Widget content;

==== lib\pages\calendar_page\calendar_utils.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:intl/intl.dart';

🏗️ CLASSES:
  class LessonStatusUtils {
  class CalendarUtils {

🔢 ENUMS:
  enum InstructorLessonStatus {
  enum LessonProgressStatus {
  enum LessonReadinessStatus {
  enum LessonStatus {

⚡ EXTENSIONS:
  extension LessonProgressStatusExtension on LessonProgressStatus {
  extension LessonReadinessStatusExtension on LessonReadinessStatus {
  extension InstructorLessonStatusExtension on InstructorLessonStatus {
  extension LessonStatusExtension on LessonStatus {

⚙️ METHODS:
  String get label {
  IconData get icon {
  Color get color {
  String get label {
  IconData get icon {
  String get description {
    static bool areCriticalFieldsFilled(LessonModel lesson)
  static LessonProgressStatus getProgressStatus(LessonModel lesson)
  static LessonReadinessStatus getReadinessStatus(LessonModel lesson)
  static List<String> getMissingCriticalFields(LessonModel lesson)
  static double getCriticalFieldsProgress(LessonModel lesson)
  static String formatTrainingPeriod(String trainingPeriod)
  static bool isValidTrainingPeriod(String period)
  static String createTrainingPeriod(DateTime startDate, DateTime endDate)
  static bool isTrainingPeriodActive(String period)
  Color get color {
  String get label {
  IconData get icon {
    static double getMinHourFromLessons(List<LessonModel> lessons)
  static double getMaxHourFromLessons(List<LessonModel> lessons)
  static Color getGroupColor(String groupName)
  static IconData getLessonTypeIcon(String lessonType)
  static bool timesOverlap(TimeOfDay start1, TimeOfDay end1, TimeOfDay start2, TimeOfDay end2)
  static double getTimePosition(TimeOfDay time, double minHour)
  static double getDurationHeight(TimeOfDay start, TimeOfDay end)
  static String formatTime(TimeOfDay time)
  static String getDayName(int weekday,
  static String getMonthName(int month,
  static bool isToday(DateTime date)
  static List<DateTime> getWeekDays(DateTime selectedDate)
  static DateTime getStartOfWeek(DateTime date)
  return DateTime(startOfWeek.year, startOfWeek.month, startOfWeek.day, 0, 0, 0);
  static DateTime getEndOfWeek(DateTime date)
  return DateTime(endOfWeek.year, endOfWeek.month, endOfWeek.day, 23, 59, 59);
  static DateTime getStartOfMonth(DateTime date)
  return DateTime(date.year, date.month, 1);
  static DateTime getEndOfMonth(DateTime date)
  return DateTime(date.year, date.month + 1, 0);
  static double getOccupancyRate(int filled, int total)
  static bool isAlmostFull(int filled, int total)
  return getOccupancyRate(filled, total) >= 0.8;
  static bool isFull(int filled, int total)
  static LessonStatus getLessonStatus(int filled, int total, bool isRegistered)
  static List<Map<String, dynamic>> sortLessonsByTime(List<Map<String, dynamic>> lessons)
  static Map<int, List<Map<String, dynamic>>> groupLessonsByDay(List<Map<String, dynamic>> lessons)
  static List<Map<String, dynamic>> findOverlappingLessons(
  static Color generateGroupColor(String groupName)
  static InstructorLessonStatus getInstructorLessonStatus(LessonModel lesson, bool isUserInstructor)
  Color get color {
  String get label {
  IconData get icon {

🏷️ PROPERTIES:
    return false;
  return false;
  return false;
  return false;
  return false;
  return true;
  final now
  final progressStatus
  final criticalFieldsFilled
  final hasInstructor
  final progress
  final readiness
  final issues
  return missing;
  int filledCount
  const int totalCount
  final parts
  return trainingPeriod;
  final regex
  final formatter
  final parts
  final formatter
  final startDate
  final endDate
  final now
    static const double timeColumnWidth
    static const double hourHeight
    static const double minuteHeight
    final minTime
  final maxTime
  final type
  final start1Minutes
  final end1Minutes
  final start2Minutes
  final end2Minutes
  final startMinutes
  final endMinutes
  final durationMinutes
  const days
  const days
  const monthNames
  const shortMonthNames
  final now
  final startOfWeek
  final weekDays
  final day
  final dayName
  return weekDays;
  final daysFromMonday
  final startOfWeek
  final startOfWeek
  final endOfWeek
  final timeA
  final timeB
  final minutesA
  final minutesB
  final dayOffset
  return grouped;
  final targetStart
  final targetEnd
  final overlapCount
  final lessonIndex
  final actualIndex
  final availableWidth
  final lessonWidth
  final left
  final right
  final startMinutes
  final endMinutes
  return null;
  final hash
  final hue

==== lib\pages\calendar_page\models\calendar_event.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';

🏗️ CLASSES:
  class CalendarEvent {

⚙️ METHODS:
    return CalendarEvent(

🏷️ PROPERTIES:
    final LessonModel lesson;
    final DateTime start;
    final DateTime end;
    final Color color;

==== lib\pages\calendar_page\models\calendar_view_type.dart ====

🔢 ENUMS:
  enum CalendarViewType {

⚡ EXTENSIONS:
  extension CalendarViewTypeExtension on CalendarViewType {

⚙️ METHODS:
  String get label {

==== lib\pages\calendar_page\models\lesson_model.dart ====

📦 IMPORTS:
  import 'package:cloud_firestore/cloud_firestore.dart';
  import 'package:flutter/material.dart';
  import 'package:intl/intl.dart';

🏗️ CLASSES:
  class LessonModel {
  class Recurrence {

⚙️ METHODS:
    return LessonModel(
  return LessonModel(
  Map<String, dynamic> toMap()
  Map<String, dynamic> toFirestore()
  LessonModel copyWith(
  return LessonModel(
  String get type {
  int get durationInMinutes {
  bool get isPast {
  bool get isActive {
  bool get isFuture {
  String get timeString {
  String get dateString {
  return DateFormat('dd.MM.yyyy').format(startTime);
  String get dateTimeString {
  String toString()
  int get hashCode
    return Recurrence(
  return Recurrence(
  Map<String, dynamic> toMap()
  Map<String, dynamic> toFirestore()
  Recurrence copyWith(
  return Recurrence(
  bool get isActive {
  bool get isExpired {
  List<DateTime> getOccurrencesInPeriod(DateTime startDate, DateTime periodStart, DateTime periodEnd)
  String get description {
  String get shortDescription {
  IconData get icon {
  bool isOccurrenceDate(DateTime date, DateTime originalDate)
  String toString()
  int get hashCode

🏷️ PROPERTIES:
    final String id;
    final String title;
    final String description;
    final DateTime startTime;
    final DateTime endTime;
    final String groupId;
    final String groupName;
    final String unit;
    final String instructorId;
    final String instructorName;
    final String location;
    final int maxParticipants;
    final String status;
    final String createdBy;
    final DateTime createdAt;
    final DateTime updatedAt;
    final Recurrence? recurrence;
    final String trainingPeriod; // 👈 НОВЕ ПОЛЕ
  final now
  final formatter
  bool operator
    final String type; // none, daily, weekly, monthly
    final int interval;
    final DateTime endDate;
  return null;
  DateTime nextDate;
  return null;
  DateTime currentDate
  final nextDate
  return occurrences;
  String intervalText
  String typeText;
  final endDateStr
  return interval
  return interval
  return interval
  final difference
  final monthsDiff
  return false;
  bool operator

==== lib\pages\calendar_page\widgets\autocomplete_field.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';

🏗️ CLASSES:
  class AutocompleteField extends StatefulWidget {
  class _AutocompleteFieldState extends State<AutocompleteField> {

⚙️ METHODS:
    const AutocompleteField(
    void initState()
  void dispose()
  return InkWell(
  Widget build(BuildContext context)
  return CompositedTransformTarget(

🏷️ PROPERTIES:
    final TextEditingController controller;
    final String labelText;
    final String? hintText;
    final IconData? prefixIcon;
    final TextCapitalization textCapitalization;
  final query
  final suggestions
  final RenderBox? renderBox
  final size
  final offset
  final suggestion

==== lib\pages\calendar_page\widgets\calendar_grid.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import '../models/calendar_view_type.dart';
  import '../models/lesson_model.dart';
  import '../../../services/calendar_service.dart';
  import '../calendar_utils.dart';

🏗️ CLASSES:
  class CalendarGrid extends StatefulWidget {
  class _CalendarGridState extends State<CalendarGrid> {

⚙️ METHODS:
    final Function(LessonModel)? onLessonTap;
    final Function(DateTime)? onDateSelected;
    const CalendarGrid(
    void initState()
  void didUpdateWidget(CalendarGrid oldWidget)
  List<LessonModel> getLessonsForSpecificDate(DateTime date)
  List<LessonModel> getLessonsForDay(int dayIndex)
  return getLessonsForSpecificDate(targetDate);
  bool hasLessonsOnDay(int dayIndex)
  return getLessonsForDay(dayIndex).isNotEmpty;
  Widget build(BuildContext context)
  return LayoutBuilder(
  return MobileDayView(
  return MobileWeekView(
  return DesktopWeekView(
  return MonthView(
  return YearView(

🏷️ PROPERTIES:
    final CalendarViewType viewType;
    final DateTime selectedDate;
  final startOfMonth
  final endOfMonth
  final startOfYear
  final endOfYear
  final normalizedTargetDate
  final normalizedLessonDate
  final weekDays
  final targetDate
  final isMobile
  final isTablet

==== lib\pages\calendar_page\widgets\calendar_header.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:intl/intl.dart';
  import 'dart:math' as math;
  import '../models/calendar_view_type.dart';
  import '../calendar_utils.dart';

🏗️ CLASSES:
  class CalendarHeader extends StatelessWidget {

⚙️ METHODS:
    const CalendarHeader(
    return DateFormat('dd MMMM yyyy', 'uk').format(selectedDate);
    return DateFormat('MMMM yyyy', 'uk').format(selectedDate);
    return DateFormat('yyyy').format(selectedDate);
  Widget build(BuildContext context)
  return Padding(
  return Row(
  const Spacer(),
  const SizedBox(width: 12),
  return Column(
  const SizedBox(height: 8),

🏷️ PROPERTIES:
    final CalendarViewType viewType;
    final DateTime selectedDate;
    final VoidCallback onPrevious;
    final VoidCallback onNext;
    final VoidCallback onToday;
    final startOfWeek
    final endOfWeek
  final isWideScreen

==== lib\pages\calendar_page\widgets\calendar_navigation.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import '../models/calendar_view_type.dart';

🏗️ CLASSES:
  class CalendarPage extends StatefulWidget {
  class _CalendarPageState extends State<CalendarPage> {

⚙️ METHODS:
    const CalendarPage(
  Widget build(BuildContext context)
  return Scaffold(
  const Divider(height: 1),

==== lib\pages\calendar_page\widgets\lesson_card.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';

🏗️ CLASSES:
  class LessonCard extends StatelessWidget {

⚙️ METHODS:
    const LessonCard(
    Widget build(BuildContext context)
  return GestureDetector(
  const SizedBox(height: 2),
  const SizedBox(height: 2),
  return GestureDetector(
  const SizedBox(height: 12),
  const SizedBox(width: 8),
  const SizedBox(height: 6),
  const SizedBox(width: 8),
  const SizedBox(height: 6),
  const SizedBox(width: 8),
  const SizedBox(height: 6),
  const SizedBox(width: 8),
  const SizedBox(height: 12),
  const SizedBox(height: 2),
  const SizedBox(width: 12),
  const SizedBox(height: 12),
  const SizedBox(height: 16),
  const SizedBox(width: 12),
  return Container(
  const SizedBox(width: 4),
  return Container(

🏷️ PROPERTIES:
    final String title;
    final String group;
    final String? instructor;
    final String? location;
    final int filled;
    final int total;
    final Color? backgroundColor;
    final bool isCompact;
    final VoidCallback? onTap;
    final VoidCallback? onRegister;
    final bool isRegistered;
    final String? unit;
  final occupancyRate
  final isAlmostFull
  final isFull
  Color backgroundColor;
  Color textColor;
  String text;
  IconData icon;

==== lib\pages\calendar_page\widgets\lesson_details_dialog.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:intl/intl.dart';
  import '../models/lesson_model.dart';
  import '../../../services/calendar_service.dart';
  import '../calendar_utils.dart';
  import '../../../globals.dart';

🏗️ CLASSES:
  class LessonDetailsDialog extends StatefulWidget {
  class _LessonDetailsDialogState extends State<LessonDetailsDialog> {

⚙️ METHODS:
    const LessonDetailsDialog(
    void initState()
  Widget build(BuildContext context)
  return Dialog(
  const SizedBox(width: 12),
  const SizedBox(height: 4),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const Text(
  const SizedBox(height: 8),
  const SizedBox(height: 16),
  return Row(
  const SizedBox(width: 12),
  const SizedBox(height: 2),
  return Column(
  const Text(
  const SizedBox(height: 12),
  const SizedBox(width: 12),
  const SizedBox(height: 4),
  const SizedBox(height: 16),
  const SizedBox(width: 8),
  return Column(
  const Text(
  const SizedBox(height: 8),
  const SizedBox(width: 8),
  return Column(
  else if (isUserInstructor)
  const SizedBox(height: 12),
  const SizedBox(width: 12),
  const SizedBox(height: 8),
  const SnackBar(
  const SnackBar(

🏷️ PROPERTIES:
    final LessonModel lesson;
    final VoidCallback? onUpdated;
  final lesson
  final status
  bool isMultiline
  final needsInstructor
  final isUserInstructor
  final status
  final readinessStatus
  final missingFields
  final hasProblems
  String statusText;
  Color statusColor;
  final canEdit
  final needsInstructor
  final isUserInstructor
  final canTakeLesson
  final currentRole
  return currentRole
  final success
  final success
  final currentRole
  final currentUser
  return currentRole
  final success
  final success
  final success

==== lib\pages\calendar_page\widgets\lesson_form_dialog.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:flutter/services.dart';
  import 'package:intl/intl.dart';
  import '../models/lesson_model.dart';
  import '../../../services/calendar_service.dart';
  import '../calendar_utils.dart';
  import '../../../globals.dart';
  import '../../../services/lesson_templates_service.dart';

🏗️ CLASSES:
  class LessonFormDialog extends StatefulWidget {
  class _LessonFormDialogState extends State<LessonFormDialog> {

⚙️ METHODS:
    const LessonFormDialog(
    void initState()
  void dispose()
  Widget build(BuildContext context)
  return Dialog(
  const SizedBox(height: 20),
  const SizedBox(height: 20),
  const SizedBox(height: 20),
  const SizedBox(height: 20),
  return Container(
  const SizedBox(width: 12),
  return Column(
  const Text(
  const SizedBox(height: 12),
  const SizedBox(height: 12),
  const Text('Шаблони занять:', style: TextStyle(fontWeight: FontWeight.w500)),
  const SizedBox(height: 8),
  const SizedBox(height: 16),
  return Column(
  const Text(
  const SizedBox(height: 12),
  const SizedBox(height: 16),
  const SizedBox(width: 16),
  const SizedBox(height: 8),
  return Column(
  const Text(
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const SizedBox(width: 12),
  const SizedBox(height: 16),
  return Theme(
  return DateTimeRange(start: startDate, end: endDate);
  return Column(
  const Text(
  const Spacer(),
  const SizedBox(height: 12),
  const SizedBox(height: 16),
  const SizedBox(width: 16),
  return Column(
  const Text(
  const SizedBox(height: 12),
  const SizedBox(height: 12),
  const Text(
  const SizedBox(height: 8),
  const SizedBox(height: 12),
  const Text(
  const SizedBox(height: 8),
  return FilterChip(
  return Container(
  const SizedBox(width: 16),

🏷️ PROPERTIES:
    final LessonModel? lesson; // null для створення нового
    final DateTime? initialDate;
    final TimeOfDay? initialStartTime;
    final VoidCallback? onSaved;
  final lesson
  final template
  final duration
  final endMinutes
  final currentGroup
  final isEditing
  return null;
  final endMinutes
  return null;
  return null;
  return null;
  final number
  return null;
  final DateTimeRange? picked
  final formattedPeriod
  final text
  return null;
  final isSelected
  final date
  final time
  final endMinutes
  final date
  final tags
  final startDateTime
  final endDateTime
  final currentUser
  final currentGroup
  Recurrence? recurrence;
  final lesson
  bool success;
  final newLesson
  final lessonId

==== lib\pages\calendar_page\widgets\mobile_lesson_card.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import '../models/lesson_model.dart';
  import '../calendar_utils.dart';
  import '../../../services/calendar_service.dart';

🏗️ CLASSES:
  class MobileLessonCard extends StatelessWidget {

⚙️ METHODS:
    const MobileLessonCard(
    Widget build(BuildContext context)
    return GestureDetector(
    const SizedBox(width: 8),
    const SizedBox(width: 4),
    const SizedBox(height: 8),
    const SizedBox(width: 8),
    const SizedBox(height: 4),
    const SizedBox(height: 8),
    const SizedBox(width: 4),
    const SizedBox(height: 4),
    const SizedBox(width: 4),
    const SizedBox(height: 4),
    const SizedBox(width: 4),
    const SizedBox(height: 4),
    const SizedBox(width: 4),
    const SizedBox(height: 4),
    const SizedBox(width: 4),
    const SizedBox(height: 4),
    const SizedBox(width: 4),
    const SizedBox(height: 4),
    const SizedBox(width: 4),
    const SizedBox(height: 4),
    const SizedBox(width: 4),
    const SizedBox(height: 12),
    const SizedBox(width: 4),
    const SizedBox(height: 8),

🏷️ PROPERTIES:
    final LessonModel lesson;
    final VoidCallback? onTap;
    final start
    final end
    final calendarService
    final isRegistered
    final color
    final progressStatus
    final readinessStatus
    final criticalFieldsProgress
    final missingFields
    final statusColor
    final statusLabel
    final statusIcon

==== lib\pages\calendar_page\widgets\views\desktop_week_view.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import '../../models/lesson_model.dart';
  import '../../calendar_utils.dart';
  import '../../../../services/calendar_service.dart';

🏗️ CLASSES:
  class DesktopWeekView extends StatelessWidget {

⚙️ METHODS:
    final Function(LessonModel)? onLessonTap;
    const DesktopWeekView(
    Widget build(BuildContext context)
    return Column(
    const Divider(height: 1),
  return Container(
  return Expanded(
  const SizedBox(height: 4),
  const SizedBox(width: 4),
  return SingleChildScrollView(
  return Container(
  return Container(
  return Container(
  return Positioned(
  return Positioned(
  return Positioned(
  return Expanded(
  return GestureDetector(
  const SizedBox(width: 2),
  const SizedBox(height: 2),
  const SizedBox(height: 1),

🏷️ PROPERTIES:
    final DateTime selectedDate;
    final double minHour;
    final double maxHour;
    final bool isTablet;
    final bool showSingleDay;
    static const double timeColumnWidth
    static const double hourHeight
    static const double minuteHeight
  final days
  final displayDays
  final index
  final day
  final isToday
  final hasLessons
  final hour
  final dayLessons
  final start
  final end
  final startMinutes
  final endMinutes
  final durationMinutes
  final topPosition
  final height
  final allDayLessons
  final overlappingLessons
  final aStart
  final bStart
  final totalOverlapping
  final lessonIndex
  final calendarService
  final isRegistered
  final needsInstructor
  final color
  final readinessStatus

==== lib\pages\calendar_page\widgets\views\mobile_day_view.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import '../../models/lesson_model.dart';
  import '../../calendar_utils.dart';
  import '../mobile_lesson_card.dart';

🏗️ CLASSES:
  class MobileDayView extends StatelessWidget {

⚙️ METHODS:
    final Function(LessonModel)? onLessonTap;
    final Function(DateTime)? onDateSelected;
    const MobileDayView(
    Widget build(BuildContext context)
    return Column(
    const Divider(height: 1),
  return Container(
  return GestureDetector(
  const SizedBox(height: 4),
  const SizedBox(height: 4),
  return RefreshIndicator(
  return Container(
  return Center(
  const SizedBox(height: 16),
  const SizedBox(height: 8),

🏷️ PROPERTIES:
    final DateTime selectedDate;
  final weekDays
  final day
  final isSelected
  final isToday
  final hasLessons
  final dayLessons
  final lesson

==== lib\pages\calendar_page\widgets\views\mobile_week_view.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:intl/intl.dart';
  import '../../models/lesson_model.dart';
  import '../../calendar_utils.dart';
  import '../mobile_lesson_card.dart';

🏗️ CLASSES:
  class MobileWeekView extends StatelessWidget {

⚙️ METHODS:
    final Function(LessonModel)? onLessonTap;
    const MobileWeekView(
    Widget build(BuildContext context)
  return RefreshIndicator(
  return Column(
  const Divider(height: 32),
  return Padding(
  const SizedBox(width: 8),
  return Center(
  const SizedBox(height: 16),
  const SizedBox(height: 8),

🏷️ PROPERTIES:
    final DateTime selectedDate;
    final weekDays
    final daysWithLessons
    final dayLessons
  final date
  final lessonsForDay

==== lib\pages\calendar_page\widgets\views\month_view.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:intl/intl.dart';
  import 'dart:math' as math;
  import '../../models/lesson_model.dart';
  import '../../calendar_utils.dart';

🏗️ CLASSES:
  class MonthView extends StatelessWidget {

⚙️ METHODS:
    final Function(DateTime)? onDateSelected;
    const MonthView(
    Widget build(BuildContext context)
  return RefreshIndicator(
  const SizedBox(height: 20),
  const SizedBox(height: 20),
  return Container(
  const SizedBox(height: 8),
  return LayoutBuilder(
  return Container(
  return LayoutBuilder(
  return Container(
  return GestureDetector(
  return Container(
  return Container(
  const Text(
  const SizedBox(height: 12),
  const SizedBox(width: 12),
  const SizedBox(height: 16),
  const Text(
  const SizedBox(height: 8),
  return Container(
  const SizedBox(height: 8),
  const SizedBox(height: 4),

🏷️ PROPERTIES:
    final DateTime selectedDate;
    final bool isMobile;
    final monthStart
    final monthEnd
    final daysInMonth
  final screenWidth
  final screenHeight
  final cellWidth
  double cellHeight;
  final weekRows
  final totalRows
  final totalHeight
  final dayIndex
  final day
  final dayNames
  final isSmall
  final lessonsForDay
  final isToday
  final isSelected
  final isSmallCell
  final isTinyCell
  final readinessStatus
  final totalLessons
  final daysWithLessons
  final tagCounts
  final topTags
  final totalLessons
  final uniqueDays

==== lib\pages\calendar_page\widgets\views\year_view.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import '../../models/lesson_model.dart';
  import '../../calendar_utils.dart';

🏗️ CLASSES:
  class YearView extends StatelessWidget {

⚙️ METHODS:
    final Function(DateTime)? onDateSelected;
    const YearView(
    Widget build(BuildContext context)
    return RefreshIndicator(
    const SizedBox(height: 20),
    const SizedBox(height: 20),
  return Container(
  const SizedBox(height: 8),
  return LayoutBuilder(
  return Container(
  return LayoutBuilder(
  return GestureDetector(
  return Column(
  return Container(
  const SizedBox(height: 16),
  const SizedBox(width: 12),
  const SizedBox(height: 12),
  const SizedBox(width: 12),
  const SizedBox(height: 16),
  const Text(
  const SizedBox(height: 8),
  return Container(
  const SizedBox(height: 6),
  const SizedBox(height: 2),

🏷️ PROPERTIES:
    final DateTime selectedDate;
    final bool isMobile;
    final year
  final yearLessons
  const maxCellWidth
  const maxCellHeight
  final screenWidth
  int crossAxisCount;
  final rows
  final gridHeight
  final month
  final monthDate
  final monthLessons
  final isCurrentMonth
  final isNarrow
  final tagCounts
  final topTags
  final yearLessons
  final totalLessons
  final monthlyStats
  final tagCounts
  final topTags
  final mostActiveMonth
  final activeMonths
  final uniqueMonths

==== lib\pages\materials_page\materials_page.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:flutter/foundation.dart';
  import '../../../globals.dart';
  import '../../../mixins/loading_state_mixin.dart';
  import '../../../widgets/loading_indicator.dart';

🏗️ CLASSES:
  class MaterialsPage extends StatefulWidget {
  class _MaterialsPageState extends State<MaterialsPage> with LoadingStateMixin {

⚙️ METHODS:
    const MaterialsPage(
    void initState()
  void dispose()
  Future<void> fetchMaterials() async
  void toggleTag(String tag)
  void clearAllFilters()
  void toggleSearch()
  bool matchesTags(List<String> itemTags)
  bool get hasActiveFilters {
  return Container(
  const SizedBox(width: 8),
  return Container(
  const SizedBox(width: 8),
  const Spacer(),
  const SizedBox(height: 8),
  return Padding(
  return Container(
  const SizedBox(width: 8),
  Widget build(BuildContext context)
  return Scaffold(
  return Center(
  const SizedBox(height: 16),
  const SizedBox(height: 8),
  const SizedBox(height: 16),
  const SizedBox(height: 24),

🏷️ PROPERTIES:
    String userRole
    bool canEdit
    bool isSearching
    String searchQuery
    final searchController
    final FocusNode searchFocusNode
  final user
  final email
  final userData
  final groupId
  final docs
  final data
  final d
  return d;
  final roles
  final currentUserRole
  final tagCounts
  final tagsList
  final sortedTags
  final tags
  final title
  final matchTags
  final matchSearch
  final tag
  final isSelected
  final filteredCount
  final totalCount

==== lib\pages\materials_page\material_dialogs.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:flutter/services.dart';
  import '../../../globals.dart';
  import '../../../mixins/loading_state_mixin.dart';
  import '../../../widgets/loading_indicator.dart';

🏗️ CLASSES:
  class MaterialDialog extends StatefulWidget {
  class _MaterialDialogState extends State<MaterialDialog> with LoadingStateMixin {

⚙️ METHODS:
    const MaterialDialog(
    bool get isEditing
    void initState()
  void dispose()
  await withLoading('save', () async
  return Column(
  const SizedBox(height: 8),
  const Text(
  const SizedBox(height: 4),
  return ActionChip(
  Widget build(BuildContext context)
  return AlertDialog(
  const SizedBox(width: 8),
  const SizedBox(height: 16),
  const Icon(Icons.error, color: Colors.red),
  const SizedBox(height: 16),
  const SizedBox(height: 8),
  const SizedBox(width: 8),
  Future<void> showAddMaterialDialog(BuildContext context, VoidCallback onRefresh) async
  return showDialog(
  Future<void> showEditMaterialDialog(
  return showDialog(

🏷️ PROPERTIES:
    final VoidCallback onRefresh;
    final formKey
  final groupId
  final docs
  final allTags
  final data
  final tags
  final url
  final fileId
  final clipboardData
  final title
  final url
  final tagsText
  final tags
  final fileId
  final modifiedTime
  final data
  final metadata
  final currentTags
  final newTags
  final isSaving
  return null;
  return null;

==== lib\pages\materials_page\material_tile.dart ====

📦 IMPORTS:
  import 'package:flutter/foundation.dart';
  import 'package:flutter/material.dart';
  import '../../../globals.dart';
  import '../../../mixins/loading_state_mixin.dart';
  import '../../../widgets/loading_indicator.dart';

🏗️ CLASSES:
  class MaterialTile extends StatefulWidget {
  class _MaterialTileState extends State<MaterialTile> with LoadingStateMixin {

⚙️ METHODS:
    const MaterialTile(
    void initState()
  return Container(
  const SizedBox(width: 2),
  return Container(
  const SizedBox(width: 2),
  Widget build(BuildContext context)
  return Card(
  const SizedBox(width: 16),
  const SizedBox(height: 4),
  const SizedBox(width: 8),
  const SizedBox(height: 4),
  await showEditMaterialDialog(
  const PopupMenuItem(
  const PopupMenuItem(
  const PopupMenuItem(

🏷️ PROPERTIES:
    final VoidCallback onRefresh;
    final bool isWeb;
    final String userRole;
    late bool isSaved
    late String? fileId;
    final url
  final modifiedAt
  return null;
  return null;
  final now
  final difference
  final weeks
  final months
  final years
  final saved
  final confirmed
  final docId
  final result
  final deleted
  final skipped
  final title
  final url
  final title
  final tags
  final canEdit
  final isAdmin
  final isDownloading
  final isOpening
  final isDeleting
  final isDeletingGlobal
  final isAnyLoading

==== lib\pages\tools_page\tools_page.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:cloud_firestore/cloud_firestore.dart';
  import '../../../globals.dart';
  import '../../../mixins/loading_state_mixin.dart';
  import '../../../widgets/loading_indicator.dart';

🏗️ CLASSES:
  class ToolsPage extends StatefulWidget {
  class _ToolsPageState extends State<ToolsPage> with LoadingStateMixin {

⚙️ METHODS:
  IconData iconFromData(Map<String, dynamic> item, bool isFolder)
  Future<IconData?> showIconPickerDialog(BuildContext context) async
  return Material(
    const ToolsPage(
    void initState()
  void dispose()
  Future<void> fetchItems() async
  await withLoading('fetch', () async
  Future<void> navigateToFolder(String folderId) async
  await withLoading('navigate', () async
  await fetchItems();
  void goBack()
  Future<void> openTool(Map<String, dynamic> item) async
  Future<void> editItem(Map<String, dynamic> item) async
  await showDialog(
  Future<void> deleteItem(Map<String, dynamic> item) async
  Future<void> deleteRecursively(String docId) async
  await deleteRecursively(childId);
  await deleteRecursively(item['id']);
  await fetchItems();
  Future<void> showAddDialog() async
  await showDialog(
  const SizedBox(width: 4),
  return Container(
  const SizedBox(width: 8),
  return Container(
  return Container(
  const SizedBox(width: 8),
  return Center(
  const SizedBox(height: 16),
  const SizedBox(height: 8),
  return Center(
  const SizedBox(height: 16),
  const SizedBox(height: 8),
  const SizedBox(height: 24),
  Widget build(BuildContext context)
  return Scaffold(
  return Card(
  const SizedBox(height: 8),
  const Text(
  return ToolTile(
  await navigateToFolder(item['id']);
  await openTool(item);

🏷️ PROPERTIES:
  final iconCode
  final fontFamily
  const allIcons
  final iconData
    String? searchQuery;
    final TextEditingController searchController
  final groupId
  final parentId
  final docs
  final groupId
  final snapshot
  final fileId
  final groupId
  final userRole
  final children
  final childData
  final childId
  return currentItems;
  final title
  final description
  final query
  final totalItems
  final folders
  final tools
  final filteredCount
  final isAdmin
  final isAdmin
  final isNavigating
  final itemIndex
  final item
  final isFolder
  final icon

==== lib\pages\tools_page\tool_dialog.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:flutter/services.dart';
  import '../../../globals.dart';
  import '../../../mixins/loading_state_mixin.dart';
  import '../../../widgets/loading_indicator.dart';

🏗️ CLASSES:
  class ToolDialog extends StatefulWidget {
  class _ToolDialogState extends State<ToolDialog> with LoadingStateMixin {

⚙️ METHODS:
    const ToolDialog(
    bool get isEditing
    bool get isFolder
    void initState()
  void dispose()
  await withLoading('save', () async
  throw Exception('Немає активної групи');
  return Column(
  const Text(
  const SizedBox(height: 8),
  const SizedBox(width: 12),
  const Spacer(),
  return Column(
  const Text(
  const SizedBox(height: 8),
  return Column(
  const Text(
  const SizedBox(height: 8),
  const SizedBox(width: 16),
  Widget build(BuildContext context)
  return AlertDialog(
  const SizedBox(width: 8),
  const SizedBox(height: 20),
  const SizedBox(height: 16),
  const SizedBox(height: 16),
  const Icon(Icons.error, color: Colors.red),
  const SizedBox(height: 8),
  const SizedBox(width: 6),
  const SizedBox(height: 20),

🏷️ PROPERTIES:
    final bool isEditing;
    final String parentId;
    final VoidCallback onSave;
    final titleController
    final fileIdController
    final descriptionController
    final formKey
    String selectedType
    IconData? selectedIcon;
    final item
  final fileId
  final isValid
  final clipboardData
  final text
  final fileId
  final icon
  final title
  final fileId
  final description
  final groupId
  final data
  final isSelectingIcon
  final isSaving
  return null;
  return null;

==== lib\pages\tools_page\tool_tile.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import '../../../mixins/loading_state_mixin.dart';
  import '../../../widgets/loading_indicator.dart';

🏗️ CLASSES:
  class ToolTile extends StatefulWidget {
  class _ToolTileState extends State<ToolTile> with LoadingStateMixin {

⚙️ METHODS:
    const ToolTile(
    await withLoading('tap', () async
  await withLoading('edit', () async
  await withLoading('delete', () async
  const SizedBox(width: 8),
  const Text('Підтвердження'),
  const SizedBox(height: 8),
  const SizedBox(width: 8),
  const SizedBox(height: 12),
  const SizedBox(width: 6),
  return Positioned(
  const PopupMenuItem(
  const PopupMenuItem(
  Widget build(BuildContext context)
  return MouseRegion(
  const SizedBox(height: 8),
  const SizedBox(height: 2),
  const SizedBox(height: 4),
  const SizedBox(width: 2),

🏷️ PROPERTIES:
    final String title;
    final IconData icon;
    final VoidCallback onTap;
    final bool isAdmin;
    final VoidCallback? onEdit;
    final VoidCallback? onDelete;
    final bool isFolder;
    final String? description;
  final confirmed
  final theme
  final isAnyLoading
  final theme
  final isAnyLoading

==== lib\services\auth_service.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:firebase_auth/firebase_auth.dart';
  import 'package:google_sign_in/google_sign_in.dart';
  import 'package:shared_preferences/shared_preferences.dart';
  import '../globals.dart';

🏗️ CLASSES:
  class AuthService {

⚙️ METHODS:
    static Future signInWithGoogle(BuildContext context) async
    const SnackBar(content: Text('❌ Вхід скасовано')),
  static Future<void> initializeAuth() async
  Future<String?> getAccessToken() async
  Future<bool> isUserAllowed(String email) async
  static Future<bool> isSignedIn() async
  Future<void> signOut() async
  Future<String?> forceRefreshToken() async

🏷️ PROPERTIES:
    static GoogleSignInAccount? currentGoogleUser;
    final GoogleSignInAccount? googleUser
  final googleAuth
  final credential
  final userCredential
  final email
  final prefs
  final wasSignedIn
  final account
  final auth
  GoogleSignInAccount? account
  return null;
  final auth
  return null;
  final newAuth
  return null;
  final prefs
  final prefs

==== lib\services\calendar_service.dart ====

📦 IMPORTS:
  import 'package:cloud_firestore/cloud_firestore.dart';
  import 'package:flutter/foundation.dart';
  import '../pages/calendar_page/models/lesson_model.dart';
  import '../../../globals.dart';
  import '../pages/calendar_page/calendar_utils.dart';

🏗️ CLASSES:
  class CalendarService {

⚙️ METHODS:
    Future<List<LessonModel>> getLessonsForPeriod(
  Future<List<LessonModel>> getLessonsForWeek(DateTime selectedDate) async
  Future<List<LessonModel>> getLessonsForDay(DateTime selectedDate) async
  Future<String?> createLesson(LessonModel lesson) async
  throw Exception('Немає активної групи для створення заняття');
  throw Exception('Користувач не авторизований');
  Future<bool> updateLesson(String lessonId, Map<String, dynamic> updates) async
  Future<bool> deleteLesson(String lessonId) async
  Future<bool> registerForLesson(String lessonId) async
  throw Exception('Заняття не знайдено');
  throw Exception('Вже зареєстровано на це заняття');
  throw Exception('Заняття заповнене');
  Future<bool> unregisterFromLesson(String lessonId) async
  throw Exception('Заняття не знайдено');
  throw Exception('Не зареєстровано на це заняття');
  bool isUserRegisteredForLesson(LessonModel lesson)
  Future<List<LessonModel>> getLessonsWithFilters(
  Stream<List<LessonModel>> getLessonsStream(
  Future<Map<String, dynamic>> getLessonsStatistics(
  Future<bool> takeLesson(String lessonId) async
  Future<bool> releaseLesson(String lessonId) async
  bool isUserInstructorForLesson(LessonModel lesson)
  bool doesLessonNeedInstructor(LessonModel lesson)

🏷️ PROPERTIES:
    final currentGroupId
  final querySnapshot
  final lessons
  return lessons;
  final startOfWeek
  final endOfWeek
  final startOfDay
  final endOfDay
  final currentGroupId
  final currentUser
  final lessonData
  final docRef
  return null;
  final currentGroupId
  return true;
  return false;
  final currentGroupId
  return true;
  return false;
  final currentGroupId
  final currentUser
  final lessonRef
  final lessonDoc
  final data
  final participants
  final maxParticipants
  return true;
  return false;
  final currentGroupId
  final currentUser
  final lessonRef
  final lessonDoc
  final data
  final participants
  return true;
  return false;
  final currentUser
  final currentGroupId
  Query query
  final querySnapshot
  var lessons
  return lessons;
  final currentGroupId
  final lessons
  final totalLessons
  final completedLessons
  final scheduledLessons
  final cancelledLessons
  final totalCapacity
  final currentUser
  final instructorName
  final success
  return success;
  return false;
  final success
  return success;
  return false;
  final currentUser

==== lib\services\dashboard_service.dart ====

📦 IMPORTS:
  import 'package:cloud_firestore/cloud_firestore.dart';
  import 'package:flutter/foundation.dart';
  import '../pages/calendar_page/models/lesson_model.dart';
  import '../pages/calendar_page/calendar_utils.dart';
  import '../globals.dart';

🏗️ CLASSES:
  class UserStats {
  class DashboardFeed {
  class DashboardService {

🔢 ENUMS:
  enum StatsPeriod { week, month, quarter, year }

⚙️ METHODS:
    const UserStats(
    const DashboardFeed(
    Future<List<LessonModel>> getCurrentUserLessons() async
  Future<List<LessonModel>> getLessonsWithoutInstructor(DateTime date) async
  Future<UserStats> getUserStatistics(StatsPeriod period) async
  return UserStats(
  Future<DashboardFeed> getDashboardFeed(
  void clearCache()
  Future<List<LessonModel>> getLessonsForPeriod(
  Future<Map<String, UserStats>> getInstructorsStatistics(

🏷️ PROPERTIES:
    final int conductedLessons;
    final int totalLessons;
    final int thisWeekLessons;
    final int thisMonthLessons;
    final int incompleteCount; // Кількість незаповнених занять
    final double completionRate;
    static const empty
    final UserStats userStats;
    final DateTime lastUpdated;
    static final empty
    final currentUser
    final today
    final tomorrow
    final startOfDay
    final endOfDay
    final currentGroupId
    final querySnapshot
    final lessons
    final data
    return lessons;
  final startOfDay
  final endOfDay
  final currentGroupId
  final querySnapshot
  final lessons
  final data
  return lessons;
  final currentUser
  final currentGroupId
  final now
  DateTime startDate;
  final quarter
  final allLessonsQuery
  final allLessons
  final data
  final conductedLessons
  final incompleteCount
  final type
  final startOfWeek
  final weekLessons
  final startOfMonth
  final monthLessons
  final completionRate
  final timeSinceCache
  final today
  final tomorrow
  final results
  final feed
  return feed;
  final currentGroupId
  Query query
  final querySnapshot
  final data
  final currentGroupId
  final querySnapshot
  final allLessons
  final data
  final instructor
  final now
  final instructor
  final lessons
  final conductedLessons
  final completionRate
  return instructorStats;

==== lib\services\error_notification_manager.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:flutter/services.dart';

🏗️ CLASSES:
  class ErrorNotificationManager {

⚙️ METHODS:
    void setContext(BuildContext context)
  void showError(String message,
  const SizedBox(width: 12),
  void showSuccess(String message)
  const SizedBox(width: 12),
  void showWarning(String message)
  const SizedBox(width: 12),
  void showInfo(String message)
  const SizedBox(width: 12),
  void showCriticalError(
  const SizedBox(width: 12),
  const SizedBox(height: 12),
  void showConfirmationDialog(

🏷️ PROPERTIES:
  Duration duration
  final snackBar
  final snackBar
  final snackBar
  final snackBar
  String confirmText
  String cancelText
  bool isDestructive

==== lib\services\firebase_options.dart ====

📦 IMPORTS:
  import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
  import 'package:flutter/foundation.dart'

🏗️ CLASSES:
  class DefaultFirebaseOptions {

⚡ EXTENSIONS:
  extension DriveApiKey on FirebaseOptions {

⚙️ METHODS:
  throw UnsupportedError(
  throw UnsupportedError(
  String get apiKeyForDrive
  String get googleDriveApiKey

🏷️ PROPERTIES:
    return web;
  return android;
  return ios;
  return macos;
  return windows;
  static const FirebaseOptions web
  static const FirebaseOptions android
  static const FirebaseOptions ios
  static const FirebaseOptions macos
  static const FirebaseOptions windows

==== lib\services\firestore_manager.dart ====

📦 IMPORTS:
  import 'package:cloud_firestore/cloud_firestore.dart';
  import 'package:firebase_auth/firebase_auth.dart';
  import 'package:flutter/foundation.dart';
  import '../globals.dart';

🏗️ CLASSES:
  class FirestoreManager {

⚙️ METHODS:
    Future<List<String>> getUserGroups(String email) async
  Future<bool> isUserAllowed(String email) async
  Future<List<DocumentSnapshot>> getDocumentsForGroup(
  Future<void> createDocument(
  Future<void> updateDocument(
  Future<Map<String, dynamic>> deleteDocumentWhereAllowed(
  Future<void> saveUserProfile(
  Future<void> updateEditableProfileFields(
  Future<Map<String, String>> getUserRolesPerGroup(String email) async
  Future<Map<String, dynamic>?> getOrCreateUserData() async
  Future<bool> ensureUserProfileSynced() async
  Future<Map<String, String>> getGroupNamesForUser(String email) async

🏷️ PROPERTIES:
    final normalizedEmail
    final snapshot
    final data
    final members
  return groups;
  final groups
  bool descending
  CollectionReference ref
  Query query
  final snapshot
  final ref
  final ref
  final deleted
  final skipped
  final ref
  final doc
  final groups
  final userDocRef
  final existingDoc
  final normalizedEmail
  final snapshot
  final groupId
  final data
  final membersRaw
  final members
  final role
  return rolesByGroup;
  final user
  final uid
  final email
  final docRef
  final docSnap
  final data
  return data;
  final groups
  final newData
  return newData;
  final user
  final email
  final uid
  final roles
  final groups
  final isAllowed
  final docRef
  final existingDoc
  final baseData
  return true;
  final normalizedEmail
  final snapshot
  final data
  final members
  return groupNames;

==== lib\services\html_stub.dart ====

📦 IMPORTS:
  import 'dart:typed_data';

🏗️ CLASSES:
  class Blob {
  class Url {
  class Window {
  class AnchorElement {
  class Body {
  class Document {

⚙️ METHODS:
    static String createObjectUrlFromBlob(Blob blob)
    throw UnsupportedError('createObjectUrlFromBlob не підтримується на мобільних платформах');
  static void revokeObjectUrl(String url)
  throw UnsupportedError('revokeObjectUrl не підтримується на мобільних платформах');
    void open(String url, String target)
    throw UnsupportedError('window.open не підтримується на мобільних платформах');
    void click()
    throw UnsupportedError('anchor.click не підтримується на мобільних платформах');
  void remove()
  throw UnsupportedError('anchor.remove не підтримується на мобільних платформах');
    void append(AnchorElement element)
    throw UnsupportedError('body.append не підтримується на мобільних платформах');

🏷️ PROPERTIES:
    String? href;
    String? target;
    String? download;
    Body? body
  final window
  final document

==== lib\services\lesson_templates_service.dart ====

📦 IMPORTS:
  import 'package:flutter/foundation.dart';
  import 'package:hive_flutter/hive_flutter.dart';
  import 'dart:convert';

🏗️ CLASSES:
  class LessonTemplate {
  class LessonTemplatesService {

⚙️ METHODS:
    Map<String, dynamic> toJson() =>
    Future<void> initialize() async
  Future<void> saveTemplate(LessonTemplate template) async
  Future<void> deleteTemplate(String templateId) async
  List<String> getLocationSuggestions(String query)
  List<String> getUnitSuggestions(String query)
  List<String> getTagSuggestions(String query)
  Future<void> addLocation(String location) async
  Future<void> addUnit(String unit) async
  Future<void> addTag(String tag) async
  Map<String, dynamic> createLessonFromTemplate(LessonTemplate template)
  Future<void> clearAllData() async
  Future<void> dispose() async

🏷️ PROPERTIES:
    final String id;
    final String title;
    final String description;
    final String location;
    final String unit;
    final int durationMinutes;
    final bool isDefault;
  final existingIndex
  final templatesJson
  final templatesJson
  final locations
  final units
  final tags

==== lib\services\profile_manager.dart ====

📦 IMPORTS:
  import 'package:flutter/foundation.dart';
  import 'package:hive_flutter/hive_flutter.dart';
  import '../globals.dart';

🏗️ CLASSES:
  class UserProfile {
  class CurrentGroup {
  class ProfileManager {

⚙️ METHODS:
    const UserProfile(
    String get fullName {
  String get initials {
  UserProfile copyWith(
  return UserProfile(
  Map<String, dynamic> toMap()
  return UserProfile(
    const CurrentGroup(
    Map<String, dynamic> toMap()
  return CurrentGroup(
    Future<void> initialize() async
  UserProfile get profile
  String get currentUserName
  String get currentUserInitials
  Future<bool> loadAndSyncProfile() async
  Future<bool> updatePersonalInfo(
  Future<void> setCurrentGroup(String groupId, String groupName, [String? role]) async
  Future<void> loadSavedGroupWithFallback(Map<String, String> allGroups) async
  await setCurrentGroup(firstGroupId, firstGroupName, role);
  Future<void> clearCurrentGroup() async
  Future<void> clearProfile() async
  bool needsSync()
  Map<String, String> getAvailableGroups()
  bool get isCurrentGroupAdmin {
  bool get isCurrentGroupEditor {
  Future<void> dispose() async
  String toString()

🏷️ PROPERTIES:
    final String? firstName;
    final String? lastName;
    final String? rank;
    final String? position;
    final String? phone;
    final String? email;
    final String? uid;
    final DateTime? lastUpdated;
    final first
    final last
  final first
  final last
  final emailName
  static const empty
    final String id;
    final String name;
    final String? role;
  final user
  final firestoreData
  final groups
  final roles
  final updatedProfile
  return true;
  return false;
  final user
  final updatedProfile
  return true;
  return false;
  final newGroup
  final roles
  final updatedRole
  final firstGroupId
  final firstGroupName
  final role
  final timeSinceUpdate
  final groups
  return groups;
  final role
  return role
  final data
  final data

==== lib\services\reports_service.dart ====

📦 IMPORTS:
  import 'dart:typed_data';
  import 'package:flutter/foundation.dart';
  import '../globals.dart';

🏗️ CLASSES:
  class ReportsService {

⚙️ METHODS:
    Future<void> initialize() async
  List<BaseReport> getAvailableReports()
  List<BaseReport> getReportsByCategory(String category)
  return getAvailableReports()
  List<String> getAvailableCategories()
  Future<Uint8List> generateReport(
  throw Exception('Звіт з ID "$reportId" не знайдено');
  throw Exception('Недостатньо прав для генерації звіту "$
  throw Exception('Формат $
  throw Exception('Помилка валідації дат: $dateValidationError');
  throw Exception('Помилка валідації параметрів: $paramValidationError');
  throw Exception('Помилка валідації: $specificValidationError');
  Future<Map<String, dynamic>> getReportPreview(
  throw Exception('Звіт з ID "$reportId" не знайдено');
  throw Exception('Недостатньо прав для перегляду звіту "$
  String getReportFileName(
  throw Exception('Звіт з ID "$reportId" не знайдено');
  throw Exception('ReportsService не ініціалізовано. Викличте initialize() спочатку.');
  Future<void> reload() async
  await initialize();
  Map<String, dynamic> getUsageStatistics()
  Map<String, dynamic> getReportMetadata(String reportId)
  throw Exception('Звіт з ID "$reportId" не знайдено');
  Map<String, dynamic> exportConfiguration()

🏷️ PROPERTIES:
  final currentUserRole
  return true;
  final categories
  return categories;
  return null;
  final report
  final dateValidationError
  final paramValidationError
  final specificValidationError
  final startTime
  final result
  final duration
  return result;
  final report
  final report
  const roleHierarchy
  final userLevel
  final minRequiredLevel
  final availableReports
  final formatStats
  final categoryStats
  final count
  final category
  final report

==== lib\services\file_manager\file_cache_entry.dart ====

📦 IMPORTS:
  import 'package:hive/hive.dart';

🏗️ CLASSES:
  class FileCacheEntry extends HiveObject {

⚙️ METHODS:
    String get filename
    bool get isImage
    bool get isDocument
    String get humanReadableSize {
  String toString()

🏷️ PROPERTIES:
    final String fileId;
    final String name;
    final String extension;
    final String modifiedDate;
    final int? size; // Розмір файлу в байтах
    final String? mimeType; // MIME тип файлу
    const units
    int unitIndex
    double fileSize
  return null;

==== lib\services\file_manager\file_cache_service.dart ====

📦 IMPORTS:
  import 'dart:convert';
  import 'dart:typed_data';
  import 'package:flutter/foundation.dart';
  import 'package:hive_flutter/hive_flutter.dart';

🏗️ CLASSES:
  class FileCacheService {

⚙️ METHODS:
    Future<void> init() async
  Future<void> cacheFile(
  Future<(Uint8List?, String?)> getCachedFile(String fileId) async
  Future<bool> isCached(String fileId) async
  Future<void> updateCachedFile(
  Future<void> removeCachedFile(String fileId) async
  Future<void> clearCache() async
  bool shouldUpdateFile(String fileId, String serverModifiedDate)
  int getCacheSize()
  int getCacheStorageSize()
  List<FileCacheEntry> getCachedFilesList()
  int getCachedFilesCount()
  Future<int> cleanOldFiles(Duration maxAge) async
  Future<int> cleanLargeFiles(int maxCacheSizeBytes) async
  Future<int> cleanFilesByType(String extension) async
  Map<String, dynamic> getCacheStatistics()
  Future<List<String>> validateCacheIntegrity() async
  Future<Map<String, int>> optimizeCache(

🏷️ PROPERTIES:
  final entry
  final base64Data
  final entry
  final base64Data
  final bytes
  final entry
  final entry
  final updatedEntry
  final base64Data
  final cachedDate
  final cachedDateTime
  final serverDateTime
  return true;
  int totalSize
  return totalSize;
  int totalSize
  final data
  return totalSize;
  final cutoffDate
  final filesToRemove
  final modifiedDate
  final currentSize
  final sortedFiles
  int removedCount
  int currentCacheSize
  return removedCount;
  final filesToRemove
  final files
  final extensionStats
  final mimeTypeStats
  final corruptedFiles
  final base64Data
  final bytes
  return corruptedFiles;
  Duration maxAge
  int maxSizeBytes
  final corruptedFiles
  final oldFiles
  final largeFiles

==== lib\services\file_manager\file_downloader.dart ====

📦 IMPORTS:
  import 'package:flutter/foundation.dart';
  import 'package:http/http.dart' as http;
  import '../auth_service.dart';

🏗️ CLASSES:
  class FileDownloader {

⚙️ METHODS:
    Future<Uint8List> downloadFile(String fileId) async
    throw WebDownloadException(
  throw WebDownloadException('Не вдалося отримати метадані для файлу', fileId);
  throw WebDownloadException(
  throw WebDownloadException(
  throw WebDownloadException(

🏷️ PROPERTIES:
    final FileMetadataService metadataService;
    final AuthService authService;
  final metadata
  final titleEncoded
  final ext
  final proxyUrl
  final response

==== lib\services\file_manager\file_exceptions.dart ====

🏗️ CLASSES:
  class WebDownloadException implements Exception {
  class MetadataException implements Exception {
  class FileMetadataException implements Exception {
  class FileAccessException implements Exception {

⚙️ METHODS:
    String toString() =>
    String toString() =>
    String toString() => 'FileMetadataException: $message (fileId: $fileId)';
    String toString() => 'FileAccessException: $message (fileId: $fileId)';

🏷️ PROPERTIES:
    final String message;
    final String fileId;
    final String? url;
    final String message;
    final String? fileId;
    final String message;
    final String fileId;
    final String message;
    final String fileId;

==== lib\services\file_manager\file_manager.dart ====

📦 IMPORTS:
  import 'package:flutter/foundation.dart';
  import 'package:flutter_application_1/services/file_manager/file_metadata_service.dart';
  import '../auth_service.dart';

🏗️ CLASSES:
  class FileManager {

⚙️ METHODS:
    static Future<FileManager> create(
  factory FileManager(
  throw Exception('FileManager must be initialized using FileManager.create()');
  Future<void> openFile(String fileId) async
  throw FileMetadataException('Не вдалося отримати метадані для файлу', fileId);
  throw FileAccessException('Файл не знайдено після завантаження або кешування', fileId);
  Future<Uint8List?> cacheFile(String fileId) async
  throw FileMetadataException('Не вдалося отримати метадані для файлу', fileId);
  throw FileAccessException('Файл не знайдено після завантаження або кешування', fileId);
  Future<Uint8List?> loadFile(String fileId) async
  Future<bool> refreshFileIfNeeded(String fileId) async
  throw FileMetadataException('Не вдалося отримати метадані для файлу', fileId);
  Future<List<String>> cacheMultipleFiles(List<String> fileIds) async
  await cacheFile(fileId);
  Future<void> preloadFiles(List<String> fileIds) async
  throw FileMetadataException('Не вдалося отримати метадані для файлу', fileId);
  Future<bool> isFileAvailable(String fileId) async
  Future<void> removeFileFromCache(String fileId) async
  Future<void> cleanupCache(
  Map<String, dynamic> getCacheStatistics()
  Future<FileCacheEntry> getFileMetadata(String fileId) async
  throw FileMetadataException('Не вдалося отримати метадані для файлу', fileId);
  Future<void> shareFile(String fileId) async
  throw FileAccessException('Немає кешованого файлу для надсилання', fileId);
  await FileSharer().shareFile(bytes, name);
  Future<void> shareFileByData(String fileName, Uint8List data) async
  await FileSharer().shareFile(data, fileName);

🏷️ PROPERTIES:
    final manager
    return manager;
  var metadata
  var fileBytes
  var metadata
  final shouldUpdate
  Uint8List? fileBytes;
  return fileBytes;
  return cachedData;
  var metadata
  final shouldUpdate
  final fileBytes
  return true;
  return false;
  return false;
  final successfullycached
  return successfullycached;
  final filesToPreload
  var metadata
  final shouldUpdate
  const batchSize
  final batch
  Duration maxAge
  int maxSizeBytes
  final oldFiles
  final modifiedDate
  final largeFiles
  int currentSize
  var metadata
  return metadata;
  final RegExp pattern
  final match
  return null;

==== lib\services\file_manager\file_metadata.dart ====

🏗️ CLASSES:
  class FileMetadata {

⚙️ METHODS:
    return FileMetadata(

🏷️ PROPERTIES:
    final String fileId;
    final String title;
    final String type;
    final String? modifiedTime;
    final fullName
    final ext

==== lib\services\file_manager\file_metadata_service.dart ====

📦 IMPORTS:
  import 'dart:convert';
  import 'package:flutter/foundation.dart';
  import '../auth_service.dart';
  import 'package:http/http.dart' as http;

🏗️ CLASSES:
  class FileMetadataService {

⚙️ METHODS:
    Future<FileCacheEntry?> getFileMetadata(String fileId) async
    throw MetadataException('Не вдалося отримати метадані', fileId);
  throw MetadataException('Не вдалося отримати токен для метаданих', fileId);
  throw MetadataException('Проблема з авторизацією: $
  throw MetadataException('Проксі повернув помилку: $
  throw MetadataException('Не вдалося отримати метадані після $maxRetries спроб', fileId);
  return FileCacheEntry(

🏷️ PROPERTIES:
    final AuthService authService;
  final token
  final uri
  final response
  final jsonData
  final name
  final extension
  final modifiedDate
  final mimeType
  int? size;
  final sizeValue

==== lib\services\file_manager\file_opener.dart ====

📦 IMPORTS:
  import 'package:flutter/foundation.dart';
  import '../html_stub.dart'
  import 'package:open_filex/open_filex.dart';
  import 'package:path_provider/path_provider.dart';
  import 'dart:io';
  import 'package:path/path.dart' as p;

🏗️ CLASSES:
  class FileOpener {

⚙️ METHODS:
    Future<void> openFile(String fileId, Uint8List data, FileCacheEntry metadata) async

🏷️ PROPERTIES:
    final fileName
  final fileName
  final mimeType
  final blob
  final url
  final anchor
  final fileName
  final tempDir
  final filePath
  final file
  final result

==== lib\services\file_manager\file_sharer.dart ====

📦 IMPORTS:
  import 'dart:io' show Platform, File;
  import 'package:share_plus/share_plus.dart';
  import 'package:path_provider/path_provider.dart';
  import 'package:flutter/foundation.dart';
  import '../html_stub.dart'

🏗️ CLASSES:
  class FileSharer {

⚙️ METHODS:
    Future<void> shareFile(Uint8List data, String filename) async

🏷️ PROPERTIES:
    final blob
    final url
    final anchor
    final dir
    final filePath
    final file

==== lib\services\reports\base_report.dart ====

📦 IMPORTS:
  import 'dart:typed_data';
  import 'package:intl/intl.dart';
  import 'package:flutter/material.dart';

🏗️ CLASSES:
  abstract class BaseReport {

🔢 ENUMS:
  enum ReportFormat { excel, docx, pdf, png }

⚡ EXTENSIONS:
  extension ReportFormatExtension on ReportFormat {

⚙️ METHODS:
  String get extension {
  String get mimeType {
  String get displayName {
    String get id;
    String get name;
    String get description;
    IconData get icon;
    bool get requiresParameters
    String get category
    bool get isAvailable
    required Function(Map<String, dynamic>) onParametersChanged,
    Future<Uint8List> generate(
  String getDefaultFileName(
  Future<Map<String, dynamic>> getPreview(
  Future<String?> validateReportSpecificConditions(

🏷️ PROPERTIES:
  final now
  final maxRange
  return null;
  final dateRange
  final sanitizedName
  final formatter

==== lib\services\reports\calendar_grid_report.dart ====

📦 IMPORTS:
  import 'dart:typed_data';
  import 'package:flutter/material.dart';
  import 'package:excel/excel.dart' as excel;
  import 'package:intl/intl.dart';
  import '../../pages/calendar_page/models/lesson_model.dart';
  import '../../pages/calendar_page/calendar_utils.dart';
  import '../../globals.dart';
  import '../dashboard_service.dart';

🏗️ CLASSES:
  class CalendarGridReport extends BaseReport {

⚙️ METHODS:
    String get id
    String get name
    String get description
    IconData get icon
    String get category
    bool get requiresParameters
    Future<String?> validateReportSpecificConditions(
  Future<Map<String, dynamic>> getPreview(
  String getDefaultFileName(
  Future<Uint8List> generate(
  throw UnsupportedError('Формат $

🏷️ PROPERTIES:
    final days
  final dashboardService
  final lessons
  return null;
  final dashboardService
  final lessons
  final units
  final days
  final dateRange
  final excelFile
  final sheet
  final dashboardService
  final lessons
  final daysInPeriod
  final unitsList
  final lessonsByUnitAndDate
  final days
  DateTime current
  return days;
  final units
  return units;
  final organized
  final unit
  final lessonDate
  return organized;
  final titleText
  final titleCell
  final dateRange
  final periodCell
  final groupName
  final groupCell
  const startRow
  final day
  final dayName
  final dayNumber
  final headerCell
  final unitHeaderCell
  int currentRow
  final unitLessons
  int maxLessonsPerDay
  final unitCell
  final day
  final dayLessons
  final lessonCell
  final lesson
  final cellContent
  final backgroundColor
  final title
  final legendStartRow
  final legendHeaderCell
  final colorLegend
  final colorCell
  final labelCell
  final generatedCell
  final formatter
  final start
  final end
  return start;

==== lib\services\reports\lessons_list_report.dart ====

📦 IMPORTS:
  import 'dart:typed_data';
  import 'package:flutter/material.dart';
  import 'package:excel/excel.dart' as ex;
  import 'package:intl/intl.dart';
  import '../../pages/calendar_page/models/lesson_model.dart';
  import '../../globals.dart';
  import '../dashboard_service.dart';

🏗️ CLASSES:
  class LessonsListReport extends BaseReport {
  class LessonsListParametersWidget extends StatefulWidget {
  class _LessonsListParametersWidgetState extends State<LessonsListParametersWidget> {

⚙️ METHODS:
    String get id
    String get name
    String get description
    IconData get icon
    String get category
    bool get requiresParameters
    required Function(Map<String, dynamic>) onParametersChanged,
    return LessonsListParametersWidget(
  Future<String?> validateReportSpecificConditions(
  Future<Map<String, dynamic>> getPreview(
  String getDefaultFileName(
  Future<Uint8List> generate(
  throw UnsupportedError('Формат $
    final Function(Map<String, dynamic>) onParametersChanged;
    const LessonsListParametersWidget(
    void initState()
  Widget build(BuildContext context)
  return Card(
  const Icon(Icons.settings, size: 20),
  const SizedBox(width: 8),
  const Text(
  const SizedBox(height: 16),
  const Center(
  const SizedBox(width: 8),
  const Text(
  const SizedBox(height: 8),
  return DropdownMenuItem(
  const SizedBox(height: 12),
  const SizedBox(width: 8),
  const Expanded(

🏷️ PROPERTIES:
  final instructorId
  return null;
  final dashboardService
  final lessons
  final filteredLessons
  return null;
  final dashboardService
  final lessons
  final filteredLessons
  final instructorCount
  String estimatedSize
  final dateRange
  String fileName
  final instructorName
  final excel
  final sheet
  final dashboardService
  final lessons
  final filteredLessons
  final lessonsByInstructor
  final isCompleted
  final hasInstructor
  final instructorId
  return true;
  final grouped
  final key
  return grouped;
  final titleText
  final titleCell
  final dateRange
  final periodCell
  final groupName
  final groupCell
  int currentRow
  final instructorName
  final instructorCell
  final generatedText
  final generatedCell
  int currentRow
  final headers
  final cell
  final sortedInstructors
  final lessons
  final instructorHeaderCell
  final dateCell
  final unitCell
  final periodCell
  final titleCell
  final summaryCell
  final totalLessons
  final totalInstructors
  final totalHeaderCell
  final instructorsCell
  final totalCell
  final parts
  final start
  final end
  return period;
  final formatter
  final start
  final end
  return start;
    String? selectedInstructorId;
    String? selectedInstructorName;
  final dashboardService
  final now
  final oneMonthAgo
  final recentLessons
  final instructors
  final parameters

==== lib\services\reports\quick_report_dialog.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';
  import 'package:intl/intl.dart';

🏗️ CLASSES:
  class QuickReportDialog extends StatefulWidget {
  class _QuickReportDialogState extends State<QuickReportDialog> {

⚙️ METHODS:
    final Function(DateTime startDate, DateTime endDate) onGenerate;
    const QuickReportDialog(
    Widget build(BuildContext context)
    return Dialog(
    const SizedBox(width: 8),
    const SizedBox(height: 20),
    const Text(
    const SizedBox(height: 12),
    const SizedBox(height: 16),
    const SizedBox(height: 24),
    const SizedBox(width: 12),
  return Container(
  const Text(
  const SizedBox(height: 4),
  const SizedBox(width: 12),
  const Text(
  const SizedBox(height: 4),
  const SizedBox(height: 12),
  return OutlinedButton(
  Future<void> showQuickReportDialog(
  required Function(DateTime startDate, DateTime endDate) onGenerate,
  return showDialog(

🏷️ PROPERTIES:
    final String reportTitle;
    String selectedPeriod
    DateTime? customStartDate;
    DateTime? customEndDate;
  final now
  final now
  final lastMonth
  final now
  final now
  final formatter
  final startDate
  final startDate
  final startDate
  final date
  final date
  return true;
  final now

==== lib\widgets\loading_indicator.dart ====

📦 IMPORTS:
  import 'package:flutter/material.dart';

🏗️ CLASSES:
  class LoadingIndicator extends StatelessWidget {
  class OverlayLoadingIndicator extends StatelessWidget {

⚙️ METHODS:
    const LoadingIndicator(
    Widget build(BuildContext context)
    const SizedBox(height: 8),
  return Container(
    const OverlayLoadingIndicator(
    Widget build(BuildContext context)
    return Stack(

🏷️ PROPERTIES:
    final String? message;
    final double size;
    final Color? color;
    final bool showBackground;
    final theme
    Widget indicator
  return indicator;
    final Widget child;
    final bool isLoading;
    final String? message;
